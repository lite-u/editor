{"version":3,"sources":["../src/main/history/DoublyLinkedList.ts","../src/main/history/history.ts","../src/main/actions/actions.ts","../src/core/utils.ts","../src/core/modules/base.ts","../src/core/modules/handleBasics.ts","../src/lib/lib.ts","../src/core/modules/shapes/shape.ts","../src/core/modules/shapes/rectangle.ts","../src/core/modules/shapes/ellipse.ts","../src/lib/deepClone.ts","../src/main/modules/moduleModify.ts","../src/lib/typeCheck.ts","../src/main/selection/helper.ts","../src/main/viewport/domManipulations.ts","../src/main/viewport/selectionRender.ts","../src/main/viewport/eventHandlers/funcs.ts","../src/main/viewport/eventHandlers/mouseDown.ts","../src/main/viewport/eventHandlers/mouseUp.ts","../src/main/viewport/eventHandlers/keyDown.ts","../src/main/viewport/eventHandlers/keyUp.ts","../src/main/viewport/eventHandlers/wheel.ts","../src/main/viewport/eventHandlers/pointerMove.ts","../src/main/viewport/eventHandlers/contextMenu.ts","../src/main/viewport/createViewport.ts","../src/main/viewport/destroyViewport.ts","../src/main/viewport/resetCanvas.ts","../src/main/history/helpers.ts","../src/main/history/redo.ts","../src/main/history/undo.ts","../src/main/history/pick.ts","../src/main/viewport/helper.ts","../src/main/initEditor.ts","../src/main/editor.ts","../src/index.ts"],"sourcesContent":["import {HistoryNext, HistoryOperation, HistoryPrev} from './type'\n\nclass HistoryNode {\n  data: HistoryOperation\n  prev: HistoryPrev\n  next: HistoryNext\n  id: number\n\n  constructor(prev: HistoryPrev, next: HistoryNext, data: HistoryOperation, id = -1) {\n    this.data = data\n    this.prev = prev\n    this.next = next\n    this.id = id\n  }\n}\n\nclass DoublyLinkedList {\n  head: HistoryNode | null\n  tail: HistoryNode | null\n  current: HistoryNode | null\n\n  constructor() {\n    this.head = null\n    this.tail = null\n    this.current = null\n  }\n\n  /**\n   * Detach: detach all nodes after current\n   */\n  protected detach(): HistoryNode | null {\n    if (this.current) {\n      this.current.next = null\n      this.tail = this.current\n    }\n\n    return this.current\n  }\n\n  /*\n  * Create a new node and connect it to the last\n  * */\n  protected append(data: HistoryOperation): HistoryNode {\n    let newNode\n    const {tail} = this\n\n    if (tail) {\n      newNode = new HistoryNode(tail, null, data, tail.id + 1)\n\n      tail.next = newNode\n      this.tail = newNode\n    } else {\n      newNode = new HistoryNode(null, null, data, 0)\n\n      this.head = newNode\n      this.tail = newNode\n    }\n\n    this.current = newNode\n\n    return newNode\n  }\n\n  /*\n  * Move current back\n  * */\n  protected back(): HistoryNode | false {\n    if (this.current === this.head) {\n      return false\n    }\n\n    this.current = this.current!.prev\n    return this.current as HistoryNode\n  }\n\n  /*\n * Move current forward\n * */\n  protected forward(): HistoryNode | false {\n    if (this.current === this.tail) {\n      return false\n    }\n\n    this.current = this.current!.next\n\n    return this.current as HistoryNode\n  }\n\n  /**\n   * 'front' : target node in front of current node\n   * 'behind' : target node behind of current node\n   * 'equal' : target node equal to current node\n   * false : target node not belong to this linked list\n   */\n  protected compareToCurrentPosition(node: HistoryNode): 'front' | 'equal' | 'behind' | false {\n    if (node === this.current) return 'equal'\n\n    let localCurrent = this.head\n\n    while (localCurrent) {\n      if (this.current === localCurrent) {\n        return 'behind'\n      }\n\n      if (node === localCurrent) {\n        return 'front'\n      }\n\n\n      localCurrent = localCurrent.next\n    }\n\n    return false\n  }\n\n  destroy() {\n    this.head = null\n    this.tail = null\n    this.current = null\n  }\n}\n\nexport {HistoryNode}\n\nexport default DoublyLinkedList","import Editor from '../editor'\nimport DoublyLinkedList, {HistoryNode} from './DoublyLinkedList'\nimport {HistoryOperation} from './type'\n\nclass History extends DoublyLinkedList {\n  private editor: Editor\n\n  constructor(editor: Editor) {\n    super()\n    this.editor = editor\n    this.init()\n  }\n\n  init() {\n    this.append({\n      type: 'history-init',\n      payload: {\n        state: null,\n        selectedModules: new Set(),\n      },\n    })\n\n    this.editor.events.onHistoryUpdated?.(this)\n  }\n\n  // Add a History node after the current\n  add(data: HistoryOperation): void {\n    this.detach()\n    this.append(data)\n\n  }\n\n  toArray(): HistoryNode[] {\n    const list: HistoryNode[] = []\n\n    if (this.head) {\n      let curr = this.head\n\n      list.push(curr)\n\n      while (curr.next) {\n        list.push(curr.next)\n        curr = curr.next\n      }\n    }\n\n    return list\n  }\n\n  public compareToCurrentPosition(node: HistoryNode) {\n    return super.compareToCurrentPosition(node)\n  }\n\n  public forward(): HistoryNode | false {\n    return super.forward()\n  }\n\n  public back(): HistoryNode | false {\n    return super.back()\n  }\n}\n\nexport default History\n\n\n","// import Editor from '../editor'\nimport {EditorEventData, EditorEventType} from './type'\n\nexport type EventsCallback<K extends EditorEventType> = EditorEventData<K> extends never ? () => void : (data: EditorEventData<K>) => void;\n\nclass Action {\n  private readonly eventsMap: Map<\n    EditorEventType,\n    (EditorEventData<EditorEventType> extends never ? () => void : (data: EditorEventData<EditorEventType>) => void)[]\n  > = new Map()\n\n  constructor() {}\n\n  // subscribe\n  public on<K extends EditorEventType>(\n    eventName: K,\n    callback: EventsCallback<K>,\n  ) {\n    if (this.eventsMap.has(eventName)) {\n      this.eventsMap\n        .get(eventName)!\n        .push(callback as EventsCallback<EditorEventType>)\n    } else {\n      this.eventsMap.set(eventName, [\n        callback as EventsCallback<EditorEventType>,\n      ])\n    }\n  }\n\n  // unsubscribe\n  public off<K extends EditorEventType>(\n    eventName: K,\n    callback: EventsCallback<K>,\n  ) {\n    if (this.eventsMap.has(eventName)) {\n      const arr = this.eventsMap.get(eventName)!\n\n      for (let i = arr.length - 1; i >= 0; i--) {\n        if (arr[i] === callback) {\n          arr.splice(i, 1)\n          return 'deleted'\n        }\n      }\n\n      return 'Cannot find event or function'\n    }\n  }\n\n  public dispatch<K extends EditorEventType>(\n    type: K,\n    data?: EditorEventData<K>,\n  ) {\n    // console.info('action: ', type,data)\n    // console.info('action: ', type)\n\n    if (this.eventsMap.has(type)) {\n      this.eventsMap.get(type)!.forEach((cb) => {\n        cb(data as EditorEventData<K>)\n      })\n    }\n  }\n\n  public execute<K extends EditorEventType>(type: K, data: EditorEventData<K>) {\n    this.dispatch(type, data)\n\n    // console.log(type,data)\n  }\n\n  public destroy() {\n    this.eventsMap.clear()\n  }\n}\n\nexport default Action\n","// import {RenderPropsList} from './renderer/type'\nimport {ModuleProps} from './modules/type'\nimport {BoundingRect, Point, Rect} from '../type'\n\nexport const generateBoundingRectFromRotatedRect = ({x, y, width, height}: Rect, rotation: number): BoundingRect => {\n  const centerX = x + width / 2\n  const centerY = y + height / 2\n  const rad = (rotation * Math.PI) / 180\n  const cos = Math.cos(rad)\n  const sin = Math.sin(rad)\n\n  const rotatedWidth = Math.abs(width * cos) + Math.abs(height * sin)\n  const rotatedHeight = Math.abs(width * sin) + Math.abs(height * cos)\n  const rectX = centerX - rotatedWidth / 2\n  const rectY = centerY - rotatedHeight / 2\n\n  return generateBoundingRectFromRect({\n    x: rectX,\n    y: rectY,\n    width: rotatedWidth,\n    height: rotatedHeight,\n  })\n}\n\nexport const generateBoundingRectFromRect = (rect: Rect): BoundingRect => {\n  const {x, y, width, height} = rect\n\n  return {\n    x,\n    y,\n    width,\n    height,\n    top: y,\n    bottom: y + height,\n    left: x,\n    right: x + width,\n    cx: x + width / 2,\n    cy: y + height / 2,\n  }\n}\n\nexport const generateBoundingRectFromTwoPoints = (p1: Point, p2: Point): BoundingRect => {\n  const minX = Math.min(p1.x, p2.x)\n  const maxX = Math.max(p1.x, p2.x)\n  const minY = Math.min(p1.y, p2.y)\n  const maxY = Math.max(p1.y, p2.y)\n\n  return generateBoundingRectFromRect({\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY,\n  })\n}\n\nexport function rectsOverlap(r1: BoundingRect, r2: BoundingRect): boolean {\n  return !(\n    r1.right < r2.left ||\n    r1.left > r2.right ||\n    r1.bottom < r2.top ||\n    r1.top > r2.bottom\n  )\n}\n\n/*export function rectInside(inner: BoundingRect, outer: BoundingRect): boolean {\n  return (\n    inner.left >= outer.left &&\n    inner.right <= outer.right &&\n    inner.top >= outer.top &&\n    inner.bottom <= outer.bottom\n  )\n}*/\n\nexport const isInsideRotatedRect = ({x: mouseX, y: mouseY}: Point, rect: Rect, rotation: number): boolean => {\n  const {\n    x: centerX,\n    y: centerY,\n    width,\n    height,\n  } = rect\n  if (width <= 0 || height <= 0) {\n    return false // Invalid rectangle dimensions\n  }\n\n  // If the rotation is 0, no need to apply any rotation logic\n  if (rotation === 0) {\n    const halfWidth = width / 2\n    const halfHeight = height / 2\n\n    return (\n      mouseX >= centerX - halfWidth && mouseX <= centerX + halfWidth &&\n      mouseY >= centerY - halfHeight && mouseY <= centerY + halfHeight\n    )\n  }\n\n  // Convert rotation angle from degrees to radians\n  const angle = rotation * (Math.PI / 180)\n\n  // Pre-calculate sine and cosine of the rotation angle for optimization\n  const cosAngle = Math.cos(angle)\n  const sinAngle = Math.sin(angle)\n\n  // Step 1: Translate the mouse position to the local space of the rotated rectangle\n  const dx = mouseX - centerX\n  const dy = mouseY - centerY\n\n  // Step 2: Undo the rotation by rotating the mouse position back\n  const unrotatedX = dx * cosAngle + dy * sinAngle\n  const unrotatedY = -dx * sinAngle + dy * cosAngle\n\n  // Step 3: Check if the unrotated mouse position lies within the bounds of the axis-aligned rectangle\n  const halfWidth = width / 2\n  const halfHeight = height / 2\n\n  return (\n    unrotatedX >= -halfWidth && unrotatedX <= halfWidth &&\n    unrotatedY >= -halfHeight && unrotatedY <= halfHeight\n  )\n}\n\nexport const isNegativeZero = (x: number) => x === 0 && (1 / x) === -Infinity\n\nexport function throttle<T extends (...args: unknown[]) => void>(func: T, delay: number): (...args: Parameters<T>) => void {\n  let lastCall = 0\n  let timeoutId: ReturnType<typeof setTimeout> | undefined\n\n  return (...args: Parameters<T>): void => {\n    const now = Date.now()\n\n    const invoke = () => {\n      lastCall = now\n      func(...args)\n    }\n\n    if (now - lastCall >= delay) {\n      invoke()\n    } else {\n      if (timeoutId !== undefined) {\n        clearTimeout(timeoutId)\n      }\n      timeoutId = setTimeout(invoke, delay - (now - lastCall))\n    }\n  }\n}\n\nexport const setFloatOnProps = <T extends ModuleProps, K extends keyof ModuleProps>(obj: T, keys: K[]): void => {\n  keys.forEach((key) => {\n    (obj[key] as number) = Math.floor(obj[key] as number)\n  })\n}","import Editor from '../../main/editor'\nimport {RotateHandler} from '../../main/selection/type'\nimport {HexColor, Opacity, Rotation, Shadow, UID} from '../type'\nimport {BoundingRect} from '../../type'\n\nexport interface BasicModuleProps {\n  id: UID\n  layer: number\n  // type: keyof ModuleTypeMap\n  enableLine?: boolean\n  lineColor: HexColor\n  lineWidth: number\n  opacity: Opacity\n  shadow?: string\n  rotation?: number\n}\n\nclass Base {\n  id: UID\n  // type: string\n  enableLine: boolean\n  lineWidth: number\n  lineColor: HexColor\n  opacity: Opacity\n  rotation: Rotation\n  shadow: Shadow\n  layer: number\n\n  constructor({\n                id,\n                lineColor,\n                lineWidth = 1,\n                opacity = 100,\n                // type,\n                layer = 1,\n                rotation = 0,\n                shadow = '',\n                enableLine = true,\n              }: BasicModuleProps) {\n    this.id = id\n    this.layer = layer\n    this.enableLine = enableLine\n    this.lineColor = lineColor\n    this.lineWidth = lineWidth\n    this.opacity = opacity!\n    this.rotation = rotation\n    this.shadow = shadow\n    // this.type = type\n  }\n\n  protected getDetails<T extends boolean>(includeIdentifiers: T = true as T): T extends true ? BasicModuleProps : Omit<BasicModuleProps, 'id' & 'layer'> {\n    const base = {\n      // type: this.type,\n      enableLine: this.enableLine,\n      lineColor: this.lineColor,\n      lineWidth: this.lineWidth,\n      opacity: this.opacity,\n      shadow: this.shadow,\n      rotation: this.rotation,\n    }\n\n    if (includeIdentifiers) {\n      return {\n        ...base,\n        id: this.id,\n        layer: this.layer,\n      } as BasicModuleProps\n    }\n\n    return base as Omit<BasicModuleProps, 'id' & 'layer'>\n  }\n\n  protected getBoundingRect(): BoundingRect {\n    return {bottom: 0, cx: 0, cy: 0, left: 0, right: 0, top: 0, x: 0, y: 0, width: 0, height: 0}\n  }\n\n  protected render(_ctx: CanvasRenderingContext2D): void {\n    return undefined\n  }\n\n  static applyRotating(this: Editor, shiftKey: boolean) {\n    const {mouseDownPoint, mouseMovePoint, scale, dpr, offset} = this.viewport\n    const {module: {rotation}, moduleOrigin} = this._rotatingOperator as RotateHandler\n    const {x, y} = moduleOrigin\n\n    const downX = (mouseDownPoint.x - offset.x / dpr) / scale * dpr\n    const downY = (mouseDownPoint.y - offset.y / dpr) / scale * dpr\n    const moveX = (mouseMovePoint.x - offset.x / dpr) / scale * dpr\n    const moveY = (mouseMovePoint.y - offset.y / dpr) / scale * dpr\n\n    const startAngle = Math.atan2(downY - y, downX - x)\n    const currentAngle = Math.atan2(moveY - y, moveX - x)\n\n    let rotationDelta = (currentAngle - startAngle) * (180 / Math.PI)\n\n    if (shiftKey) {\n      rotationDelta = Math.round(rotationDelta / 15) * 15\n    }\n\n    let newRotation = (rotation + rotationDelta) % 360\n    if (newRotation < 0) newRotation += 360\n\n    return newRotation\n  }\n\n}\n\nexport default Base","export const HANDLER_OFFSETS = [\n  {\n    type: 'rotate',\n    name: 'rotate-tl',\n    x: 0,\n    y: 0,\n    offsetX: -5,\n    offsetY: -5,\n    originCursor: 'rotate',\n    cursor: 'rotate',\n  }, // left-center\n  {\n    type: 'rotate',\n    name: 'rotate-tr',\n    x: 1,\n    y: 0,\n    offsetX: 5,\n    offsetY: -5,\n    originCursor: 'rotate',\n    cursor: 'rotate',\n  }, // left-center\n  {\n    type: 'rotate',\n    name: 'rotate-br',\n    x: 1,\n    y: 1,\n    offsetX: 5,\n    offsetY: 5,\n    originCursor: 'rotate',\n    cursor: 'rotate',\n  }, // left-center\n  {\n    type: 'rotate',\n    name: 'rotate-bl',\n    x: 0,\n    y: 1,\n    offsetX: -5,\n    offsetY: 5,\n    originCursor: 'rotate',\n    cursor: 'rotate',\n  },\n  {\n    type: 'resize',\n    name: 'tl',\n    x: 0,\n    y: 0,\n    originCursor: 'nwse-resize',\n    cursor: 'nwse-resize',\n  }, // top-left\n  {\n    type: 'resize',\n    name: 't',\n    x: 0.5,\n    y: 0,\n    originCursor: 'ns-resize',\n    cursor: 'ns-resize',\n  }, // top-center\n  {\n    type: 'resize',\n    name: 'tr',\n    x: 1,\n    y: 0,\n    originCursor: 'nesw-resize',\n    cursor: 'nesw-resize',\n  }, // top-right\n  {\n    type: 'resize',\n    name: 'r',\n    x: 1,\n    y: 0.5,\n    originCursor: 'ew-resize',\n    cursor: 'ew-resize',\n  }, // right-center\n  {\n    type: 'resize',\n    name: 'br',\n    x: 1,\n    y: 1,\n    originCursor: 'nwse-resize',\n    cursor: 'nwse-resize',\n  }, // bottom-right\n  {\n    type: 'resize',\n    name: 'b',\n    x: 0.5,\n    y: 1,\n    originCursor: 'ns-resize',\n    cursor: 'ns-resize',\n  }, // bottom-center\n  {\n    type: 'resize',\n    name: 'bl',\n    x: 0,\n    y: 1,\n    originCursor: 'nesw-resize',\n    cursor: 'nesw-resize',\n  }, // bottom-left\n  {\n    type: 'resize',\n    name: 'l',\n    x: 0,\n    y: 0.5,\n    originCursor: 'ew-resize',\n    cursor: 'ew-resize',\n  }, // left-center\n  // left-center\n] as const\n\n","import {ResizeHandleName, ResizeTransform} from '../main/selection/type'\nimport {BoundingRect, DPR, Point} from '../type'\n\ninterface DrawCrossLineProps {\n  ctx: CanvasRenderingContext2D;\n  mousePoint: Point;\n  scale: number;\n  dpr: DPR;\n  offset: Point;\n  virtualRect: BoundingRect;\n}\n\n/** Convert screen (mouse) coordinates to canvas coordinates */\nexport function screenToWorld(\n  point: Point,\n  offset: Point,\n  scale: number,\n  dpr: DPR,\n): {\n  x: number;\n  y: number;\n} {\n\n  return {\n    x: (point.x * dpr - offset.x) / scale,\n    y: (point.y * dpr - offset.y) / scale,\n  }\n}\n\n/** Convert canvas coordinates to screen coordinates */\nexport function worldToScreen(\n  point: Point,\n  offset: Point,\n  scale: number,\n  dpr: DPR,\n): {\n  x: number;\n  y: number;\n} {\n\n  /*\n  *\n  x: canvasX * scale + offsetX,\n  y: canvasY * scale + offsetY,\n  * */\n  return {\n    x: ((point.x * scale) + offset.x) / dpr,\n    y: ((point.y * scale) + offset.y) / dpr,\n  }\n}\n\nexport const drawCrossLine = ({\n                                ctx,\n                                mousePoint,\n                                scale,\n                                dpr,\n                                offset,\n                                virtualRect: {left: minX, top: minY, right: maxX, bottom: maxY},\n                              }: DrawCrossLineProps): void => {\n  const textOffsetX = 10 / (dpr * scale)\n  const textOffsetY = 10 / (dpr * scale)\n  const {x, y} = screenToWorld(\n    mousePoint,\n    offset,\n    scale,\n    dpr,\n  )\n  const crossLineColor = '#ff0000'\n  const textColor = '#ff0000'\n  const textShadowColor = '#000'\n\n  ctx.save()\n  ctx.textBaseline = 'alphabetic'\n  ctx.font = `${24 / scale}px sans-serif`\n  // ctx.setLineDash([3 * dpr * scale, 5 * dpr * scale])\n  ctx.fillStyle = textColor\n  ctx.shadowColor = crossLineColor\n  ctx.shadowBlur = 1\n\n  ctx.fillText(\n    `${Math.floor(x)}, ${Math.floor(y)}`,\n    x + textOffsetX,\n    y - textOffsetY,\n    200 / scale,\n  )\n  ctx.lineWidth = 2 / (dpr * scale)\n  ctx.strokeStyle = crossLineColor\n  ctx.shadowColor = textShadowColor\n  ctx.shadowBlur = 0\n  ctx.beginPath()\n  ctx.moveTo(minX, y)\n  ctx.lineTo(maxX, y)\n  ctx.moveTo(x, minY)\n  ctx.lineTo(x, maxY)\n  ctx.stroke()\n  ctx.restore()\n}\n\nexport const areSetsEqual = <T>(setA: Set<T>, setB: Set<T>): boolean => {\n  if (setA.size !== setB.size) return false\n  for (const item of setA) {\n    if (!setB.has(item)) return false\n  }\n  return true\n}\n\nexport const getSymmetricDifference = <T>(\n  setA: Set<T>,\n  setB: Set<T>,\n): Set<T> => {\n  const result = new Set<T>()\n\n  for (const item of setA) {\n    if (!setB.has(item)) result.add(item)\n  }\n  for (const item of setB) {\n    if (!setA.has(item)) result.add(item)\n  }\n\n  return result\n}\n\nexport function rotatePoint(\n  px: number,\n  py: number,\n  cx: number,\n  cy: number,\n  rotation: number,\n) {\n  const dx = px - cx\n  const dy = py - cy\n  const angle = rotation * (Math.PI / 180)\n  const cos = Math.cos(angle)\n  const sin = Math.sin(angle)\n\n  return {\n    x: cx + dx * cos - dy * sin,\n    y: cy + dx * sin + dy * cos,\n  }\n}\n\nexport function getResizeTransform(\n  name: ResizeHandleName,\n  symmetric = false,\n): ResizeTransform {\n  const base = (() => {\n    switch (name) {\n      case 'tl':\n        return {dx: -1, dy: -1, cx: 0.5, cy: 0.5}\n      case 't':\n        return {dx: 0, dy: -1, cx: 0.0, cy: 0.5}\n      case 'tr':\n        return {dx: 1, dy: -1, cx: -0.5, cy: 0.5}\n      case 'r':\n        return {dx: 1, dy: 0, cx: -0.5, cy: 0.0}\n      case 'br':\n        return {dx: 1, dy: 1, cx: -0.5, cy: -0.5}\n      case 'b':\n        return {dx: 0, dy: 1, cx: 0.0, cy: -0.5}\n      case 'bl':\n        return {dx: -1, dy: 1, cx: 0.5, cy: -0.5}\n      case 'l':\n        return {dx: -1, dy: 0, cx: 0.5, cy: 0.0}\n      default:\n        throw new Error(`Unsupported resize handle: ${name}`)\n    }\n  })()\n\n  if (symmetric) {\n    // When resizing symmetrically, center should not move.\n    return {...base, cx: 0, cy: 0}\n  }\n\n  return base\n}","import Base, {BasicModuleProps} from '../base'\nimport {HANDLER_OFFSETS} from '../handleBasics'\nimport {OperationHandlers} from '../../../main/selection/type'\nimport {rotatePoint} from '../../../lib/lib'\nimport Rectangle, {RectangleProps} from './rectangle'\nimport {ModuleProps} from '../type'\nimport {FillColor, Gradient} from '../../type'\nimport {BoundingRect, CenterBasedRect} from '../../../type'\n\nexport interface ShapeProps extends BasicModuleProps {\n  x: number\n  y: number\n  enableGradient?: boolean\n  gradient?: Gradient\n  enableFill?: boolean\n  fillColor?: FillColor\n  dashLine?: string\n}\n\nclass Shape extends Base {\n  public x: number\n  public y: number\n  fillColor: FillColor\n  enableFill: boolean\n\n  constructor({\n                x,\n                y,\n                fillColor,\n                enableFill = true,\n                ...rest\n              }: ShapeProps) {\n    super(rest)\n\n    this.x = x\n    this.y = y\n    this.fillColor = fillColor as FillColor\n    this.enableFill = enableFill\n  }\n\n  public getDetails<T extends boolean>(\n    includeIdentifiers: T = true as T,\n  ): T extends true ?\n    ShapeProps :\n    Omit<ShapeProps, 'id' & 'layer'> {\n\n    return {\n      ...super.getDetails(includeIdentifiers),\n      fillColor: this.fillColor,\n      enableFill: this.enableFill,\n      x: this.x,\n      y: this.y,\n    } as T extends true ? ShapeProps : Omit<ShapeProps, 'id' & 'layer'>\n  }\n\n  move(x: number, y: number) {\n    this.x += x\n    this.y += y\n  }\n\n  public getOperators(\n    resizeConfig: { lineWidth: number, lineColor: string, size: number, fillColor: string },\n    rotateConfig: { lineWidth: number, lineColor: string, size: number, fillColor: string },\n    boundingRect: CenterBasedRect,\n    moduleOrigin: ModuleProps,\n  ): OperationHandlers[] {\n    const {x: cx, y: cy, width, height} = boundingRect\n    // const id = this.id\n    const {id, rotation} = this\n\n    const handlers = HANDLER_OFFSETS.map((OFFSET): OperationHandlers => {\n      // Calculate the handle position in local coordinates\n      const currentCenterX = cx - width / 2 + OFFSET.x * width\n      const currentCenterY = cy - height / 2 + OFFSET.y * height\n      const currentModuleProps: Omit<RectangleProps, 'type'> = {\n        id,\n        width: 0,\n        height: 0,\n        x: currentCenterX,\n        y: currentCenterY,\n        lineColor: '',\n        lineWidth: 0,\n        rotation,\n        layer: this.layer,\n        opacity: 100,\n      }\n\n      // let cursor: ResizeCursor = OFFSET.cursor as ResizeCursor\n\n      if (OFFSET.type === 'resize') {\n        const rotated = rotatePoint(currentCenterX, currentCenterY, cx, cy, rotation)\n        // cursor = getCursor(rotated.x, rotated.y, cx, cy, rotation)\n        currentModuleProps.id += 'resize'\n        currentModuleProps.x = rotated.x\n        currentModuleProps.y = rotated.y\n        currentModuleProps.width = resizeConfig.size\n        currentModuleProps.height = resizeConfig.size\n        currentModuleProps.lineWidth = resizeConfig.lineWidth\n        currentModuleProps.lineColor = resizeConfig.lineColor\n        currentModuleProps.fillColor = resizeConfig.fillColor\n      } else if (OFFSET.type === 'rotate') {\n        const currentRotateHandlerCenterX = currentCenterX + OFFSET.offsetX * resizeConfig.lineWidth\n        const currentRotateHandlerCenterY = currentCenterY + OFFSET.offsetY * resizeConfig.lineWidth\n        const rotated = rotatePoint(\n          currentRotateHandlerCenterX,\n          currentRotateHandlerCenterY,\n          cx,\n          cy,\n          rotation,\n        )\n\n        currentModuleProps.id += 'rotate'\n        currentModuleProps.x = rotated.x\n        currentModuleProps.y = rotated.y\n        currentModuleProps.width = rotateConfig.size\n        currentModuleProps.height = rotateConfig.size\n        currentModuleProps.lineWidth = rotateConfig.lineWidth\n        currentModuleProps.lineColor = rotateConfig.lineColor\n        currentModuleProps.fillColor = rotateConfig.fillColor\n      }\n\n      return {\n        id: `${id}`,\n        type: OFFSET.type,\n        name: OFFSET.name,\n        // cursor,\n        moduleOrigin,\n        module: new Rectangle(currentModuleProps),\n      }\n    })\n\n    return handlers\n  }\n\n  public isInsideRect(outer: BoundingRect): boolean {\n    const inner = this.getBoundingRect()\n\n    return (\n      inner.left >= outer.left &&\n      inner.right <= outer.right &&\n      inner.top >= outer.top &&\n      inner.bottom <= outer.bottom\n    )\n  }\n}\n\nexport default Shape","import Shape, {ShapeProps} from './shape'\nimport {generateBoundingRectFromRotatedRect} from '../../utils'\nimport {SnapPointData} from '../../../main/type'\nimport {getResizeTransform} from '../../../lib/lib'\nimport {ResizeHandleName} from '../../../main/selection/type'\nimport {ModuleInstance} from '../type'\nimport {CenterBasedRect, Point, Rect} from '../../../type'\n\nexport interface RectangleProps extends ShapeProps {\n  width: number\n  height: number\n  radius?: number\n  type: 'rectangle'\n}\n\nclass Rectangle extends Shape {\n  readonly type = 'rectangle'\n  width: number\n  height: number\n  radius: number\n\n  constructor({\n                width,\n                height,\n                radius = 0,\n                ...rest\n              }: Omit<RectangleProps, 'type'>) {\n    super({...rest})\n    this.width = width!\n    this.height = height!\n    this.radius = radius!\n  }\n\n  public hitTest(point: Point, borderPadding = 5): 'inside' | 'border' | null {\n    const {x: cx, y: cy, width, height, rotation = 0} = this\n\n    const cos = Math.cos(-rotation)\n    const sin = Math.sin(-rotation)\n\n    const dx = point.x - cx\n    const dy = point.y - cy\n\n    // Rotate the point into the rectangle's local space\n    const localX = dx * cos + dy * sin\n    const localY = -dx * sin + dy * cos\n\n    const halfWidth = width / 2\n    const halfHeight = height / 2\n\n    const withinX = localX >= -halfWidth && localX <= halfWidth\n    const withinY = localY >= -halfHeight && localY <= halfHeight\n\n    if (withinX && withinY) {\n      const nearLeft = Math.abs(localX + halfWidth) <= borderPadding\n      const nearRight = Math.abs(localX - halfWidth) <= borderPadding\n      const nearTop = Math.abs(localY + halfHeight) <= borderPadding\n      const nearBottom = Math.abs(localY - halfHeight) <= borderPadding\n\n      if (nearLeft || nearRight || nearTop || nearBottom) {\n        return 'border'\n      }\n      return 'inside'\n    }\n\n    return null\n  }\n\n  static applyResizeTransform = ({\n                                   downPoint,\n                                   movePoint,\n                                   moduleOrigin,\n                                   rotation,\n                                   handleName,\n                                   scale,\n                                   dpr,\n                                   altKey = false,\n                                   shiftKey = false,\n                                 }: {\n    downPoint: { x: number; y: number };\n    movePoint: { x: number; y: number };\n    moduleOrigin: RectangleProps\n    rotation: number;\n    handleName: ResizeHandleName;\n    scale: number;\n    dpr: number;\n    altKey?: boolean;\n    shiftKey?: boolean;\n  }): Rect => {\n    const {\n      width: initialWidth,\n      height: initialHeight,\n      x: initialCX,\n      y: initialCY,\n    } = moduleOrigin\n    // Calculate raw movement in screen coordinates\n    const dxScreen = movePoint.x - downPoint.x\n    const dyScreen = movePoint.y - downPoint.y\n\n    // Convert to canvas coordinates and apply DPR\n    const dx = (dxScreen / scale) * dpr\n    const dy = (dyScreen / scale) * dpr\n\n    // Convert rotation to radians and calculate rotation matrix\n    const angle = -rotation * (Math.PI / 180)\n    const cos = Math.cos(angle)\n    const sin = Math.sin(angle)\n\n    // Transform the movement vector into the object's local coordinate system\n    const localDX = dx * cos - dy * sin\n    const localDY = dx * sin + dy * cos\n\n    // Get the resize transform based on the handle\n    const t = getResizeTransform(handleName, altKey)\n\n    // Calculate the size changes in local coordinates\n    let deltaX = localDX * t.dx\n    let deltaY = localDY * t.dy\n\n    // Maintain aspect ratio if shift key is pressed\n    if (shiftKey) {\n      const aspect = initialWidth / initialHeight\n      const absDeltaX = Math.abs(deltaX)\n      const absDeltaY = Math.abs(deltaY)\n\n      // For corner handles, use the larger movement\n      if (t.dx !== 0 && t.dy !== 0) {\n        if (absDeltaX > absDeltaY) {\n          deltaY = deltaX / aspect\n        } else {\n          deltaX = deltaY * aspect\n        }\n      }\n      // For horizontal handles, maintain aspect ratio based on width change\n      else if (t.dx !== 0) {\n        deltaY = deltaX / aspect\n      }\n      // For vertical handles, maintain aspect ratio based on height change\n      else if (t.dy !== 0) {\n        deltaX = deltaY * aspect\n      }\n    }\n\n    // Apply the resize transform\n    const factor = altKey ? 2 : 1\n    const width = Math.abs(initialWidth + deltaX * factor)\n    const height = Math.abs(initialHeight + deltaY * factor)\n\n    // Calculate the center movement in local coordinates\n    const centerDeltaX = -deltaX * t.cx * factor\n    const centerDeltaY = -deltaY * t.cy * factor\n\n    // Transform the center movement back to global coordinates\n    const globalCenterDeltaX = centerDeltaX * cos + centerDeltaY * sin\n    const globalCenterDeltaY = -centerDeltaX * sin + centerDeltaY * cos\n\n    // Calculate the new center position\n    const x = initialCX + globalCenterDeltaX\n    const y = initialCY + globalCenterDeltaY\n\n    return {x, y, width, height}\n  }\n\n  public getDetails<T extends boolean>(includeIdentifiers: T = true as T): T extends true ? RectangleProps : Omit<RectangleProps, 'id' & 'layer'> {\n    return {\n      type: this.type,\n      width: this.width,\n      height: this.height,\n      ...super.getDetails(includeIdentifiers),\n    } as T extends true ? RectangleProps : Omit<RectangleProps, 'id' & 'layer'>\n  }\n\n  public getRect(): CenterBasedRect {\n    const {x, y, width, height} = this\n\n    return {\n      x,\n      y,\n      width,\n      height,\n    }\n  }\n\n  public getBoundingRect() {\n    const {x: cx, y: cy, width, height, rotation} = this\n\n    const x = cx - width / 2\n    const y = cy - height / 2\n\n    if (rotation === 0) {\n      return {\n        x,\n        y,\n        width,\n        height,\n        left: x,\n        top: y,\n        right: x + width,\n        bottom: y + height,\n        cx,\n        cy,\n      }\n    }\n\n    return generateBoundingRectFromRotatedRect({x, y, width, height}, rotation)\n  }\n\n  public getSelectedBoxModule(lineWidth: number, lineColor: string): Rectangle {\n    const {id, rotation, layer} = this\n\n    const rectProp = {\n      ...this.getRect(),\n      lineColor,\n      lineWidth,\n      rotation,\n      layer,\n      id: id + '-selected-box',\n      opacity: 0,\n    }\n\n    return new Rectangle(rectProp)\n  }\n\n  public getHighlightModule(lineWidth: number, lineColor: string): ModuleInstance {\n    const {x, y, width, height, rotation, layer, id} = this\n    return new Rectangle({\n      x,\n      y,\n      width,\n      height,\n      // fillColor,\n      lineColor,\n      lineWidth,\n      rotation,\n      layer,\n      id: id + 'highlight',\n      opacity: 0,\n    })\n  }\n\n  public getOperators(\n    resizeConfig: { lineWidth: number, lineColor: string, size: number, fillColor: string },\n    rotateConfig: { lineWidth: number, lineColor: string, size: number, fillColor: string },\n  ) {\n\n    return super.getOperators(resizeConfig, rotateConfig, this.getRect(), this.getDetails(true))\n  }\n\n  public getSnapPoints(): SnapPointData[] {\n    const {x: cx, y: cy, width, height, id} = this\n    const halfWidth = width / 2\n    const halfHeight = height / 2\n\n    // Define basic snap points: center, corners, and edge centers\n    const points: SnapPointData[] = [\n      {id, x: cx, y: cy, type: 'center'},\n      {id, x: cx - halfWidth, y: cy - halfHeight, type: 'corner-tl'},\n      {id, x: cx + halfWidth, y: cy - halfHeight, type: 'corner-tr'},\n      {id, x: cx + halfWidth, y: cy + halfHeight, type: 'corner-br'},\n      {id, x: cx - halfWidth, y: cy + halfHeight, type: 'corner-bl'},\n      {id, x: cx, y: cy - halfHeight, type: 'edge-top'},\n      {id, x: cx + halfWidth, y: cy, type: 'edge-right'},\n      {id, x: cx, y: cy + halfHeight, type: 'edge-bottom'},\n      {id, x: cx - halfWidth, y: cy, type: 'edge-left'},\n    ]\n\n    return points\n  }\n\n  render(ctx: CanvasRenderingContext2D): void {\n    // const { x, y, width, height, fillColor } = this.getDetails();\n    const {\n      // width,\n      // height,\n      radius,\n    } = this\n    let {x, y, width, height, rotation, opacity, fillColor, lineWidth, lineColor, dashLine} = this.getDetails()\n\n    x = Math.round(x)\n    y = Math.round(y)\n    width = Math.round(width)\n    height = Math.round(height)\n    // console.log(x, y, width, height)\n    const LocalX = width / 2\n    const LocalY = height / 2\n\n    // Save current context state to avoid transformations affecting other drawings\n    ctx.save()\n\n    // Move context to the rectangle's center (Direct center point at x, y)\n    ctx.translate(x, y)\n\n    // Apply rotation if needed\n    if (rotation! > 0) {\n      ctx.rotate(rotation! * Math.PI / 180)\n    }\n\n    // Apply fill style if enabled\n    if (opacity > 0) {\n      ctx.fillStyle = fillColor as string\n      ctx.globalAlpha = opacity / 100 // Set the opacity\n    }\n\n    // Apply stroke style if enabled\n    if (lineWidth > 0) {\n      ctx.lineWidth = lineWidth\n      ctx.strokeStyle = lineColor\n      ctx.lineJoin = 'miter'\n    }\n\n    // return\n    // Draw a rounded rectangle or regular rectangle\n    ctx.beginPath()\n\n    if (dashLine) {\n      ctx.setLineDash([3, 5])\n    }\n\n    if (radius > 0) {\n      // Use arcTo for rounded corners\n      ctx.moveTo(-LocalX + radius, -LocalY)\n      ctx.arcTo(LocalX, -LocalY, LocalX, LocalY, radius)\n      ctx.arcTo(LocalX, LocalY, -LocalX, LocalY, radius)\n      ctx.arcTo(-LocalX, LocalY, -LocalX, -LocalY, radius)\n      ctx.arcTo(-LocalX, -LocalY, LocalX, -LocalY, radius)\n    } else {\n      // For square/rectangular modules with no rounded corners\n      ctx.rect(-LocalX, -LocalY, width, height)\n    }\n    ctx.closePath()\n\n    // Fill if enabled\n    if (opacity > 0) {\n      ctx.fill()\n    }\n\n    // Stroke if enabled\n    if (lineWidth > 0) {\n      ctx.stroke()\n    }\n\n    /*   if (gradient) {\n         // Implement gradient rendering (as needed)\n       }*/\n\n    // Restore the context to avoid affecting subsequent drawings\n    ctx.restore()\n  }\n}\n\nexport default Rectangle","import {generateBoundingRectFromRotatedRect} from '../../utils'\nimport Shape, {ShapeProps} from './shape'\nimport {SnapPointData} from '../../../main/type'\nimport Rectangle from './rectangle'\nimport {ResizeHandleName} from '../../../main/selection/type'\nimport {getResizeTransform} from '../../../lib/lib'\nimport {FillColor} from '../../type'\nimport {CenterBasedRect, Point} from '../../../type'\n\nexport interface EllipseProps extends ShapeProps {\n  r1: number\n  r2: number\n  type: 'ellipse'\n}\n\nclass Ellipse extends Shape {\n  readonly type = 'ellipse'\n  r1: number\n  r2: number\n  // fillColor: FillColor\n  // enableFill: boolean\n\n  constructor({\n                fillColor,\n                enableFill = true,\n                r1,\n                r2,\n                ...rest\n              }: Omit<EllipseProps, 'type'>) {\n    super({...rest})\n\n    this.r1 = r1!\n    this.r2 = r2!\n    this.fillColor = fillColor as FillColor\n    this.enableFill = enableFill\n  }\n\n  static applyResizeTransform = ({\n                                   downPoint,\n                                   movePoint,\n                                   moduleOrigin,\n                                   rotation,\n                                   handleName,\n                                   scale,\n                                   dpr,\n                                   altKey = false,\n                                   shiftKey = false,\n                                 }: {\n    downPoint: { x: number; y: number };\n    movePoint: { x: number; y: number };\n    moduleOrigin: EllipseProps\n    rotation: number;\n    handleName: ResizeHandleName;\n    scale: number;\n    dpr: number;\n    altKey?: boolean;\n    shiftKey?: boolean;\n  }): Point & { r1: number, r2: number } => {\n    const {\n      r1,\n      r2,\n      x: initialCX,\n      y: initialCY,\n    } = moduleOrigin\n    const initialWidth = r1 * 2\n    const initialHeight = r2 * 2\n\n    // Calculate raw movement in screen coordinates\n    const dxScreen = movePoint.x - downPoint.x\n    const dyScreen = movePoint.y - downPoint.y\n\n    // Convert to canvas coordinates and apply DPR\n    const dx = (dxScreen / scale) * dpr\n    const dy = (dyScreen / scale) * dpr\n\n    // Convert rotation to radians and calculate rotation matrix\n    const angle = -rotation * (Math.PI / 180)\n    const cos = Math.cos(angle)\n    const sin = Math.sin(angle)\n\n    // Transform the movement vector into the object's local coordinate system\n    const localDX = dx * cos - dy * sin\n    const localDY = dx * sin + dy * cos\n\n    // Get the resize transform based on the handle\n    const t = getResizeTransform(handleName, altKey)\n\n    // Calculate the size changes in local coordinates\n    let deltaX = localDX * t.dx\n    let deltaY = localDY * t.dy\n\n    // Maintain aspect ratio if shift key is pressed\n    if (shiftKey) {\n      const aspect = initialWidth / initialHeight\n      const absDeltaX = Math.abs(deltaX)\n      const absDeltaY = Math.abs(deltaY)\n\n      // For corner handles, use the larger movement\n      if (t.dx !== 0 && t.dy !== 0) {\n        if (absDeltaX > absDeltaY) {\n          deltaY = deltaX / aspect\n        } else {\n          deltaX = deltaY * aspect\n        }\n      }\n      // For horizontal handles, maintain aspect ratio based on width change\n      else if (t.dx !== 0) {\n        deltaY = deltaX / aspect\n      }\n      // For vertical handles, maintain aspect ratio based on height change\n      else if (t.dy !== 0) {\n        deltaX = deltaY * aspect\n      }\n    }\n\n    // Apply the resize transform\n    const factor = altKey ? 2 : 1\n    const width = Math.abs(initialWidth + deltaX * factor)\n    const height = Math.abs(initialHeight + deltaY * factor)\n\n    // Calculate the center movement in local coordinates\n    const centerDeltaX = -deltaX * t.cx * factor\n    const centerDeltaY = -deltaY * t.cy * factor\n\n    // Transform the center movement back to global coordinates\n    const globalCenterDeltaX = centerDeltaX * cos + centerDeltaY * sin\n    const globalCenterDeltaY = -centerDeltaX * sin + centerDeltaY * cos\n\n    // Calculate the new center position\n    const x = initialCX + globalCenterDeltaX\n    const y = initialCY + globalCenterDeltaY\n    console.log()\n    return {x, y, r1: width / 2, r2: height / 2}\n  }\n\n  public hitTest(point: Point, borderPadding = 5): 'inside' | 'border' | null {\n    const {x: cx, y: cy, r1, r2, rotation = 0} = this\n\n    const cos = Math.cos(-rotation)\n    const sin = Math.sin(-rotation)\n\n    const dx = point.x - cx\n    const dy = point.y - cy\n\n    const localX = dx * cos - dy * sin\n    const localY = dx * sin + dy * cos\n\n    // Ellipse equation: (x^2 / a^2) + (y^2 / b^2)\n    const norm = (localX * localX) / (r1 * r1) + (localY * localY) / (r2 * r2)\n\n    const borderRange = borderPadding / Math.min(r1, r2) // normalized padding\n\n    if (norm <= 1 + borderRange) {\n      if (norm >= 1 - borderRange) {\n        return 'border'\n      }\n      return 'inside'\n    }\n\n    return null\n  }\n\n  public getDetails<T extends boolean>(\n    includeIdentifiers: T = true as T,\n  ): T extends true ?\n    EllipseProps :\n    Omit<EllipseProps, 'id' & 'layer'> {\n\n    return {\n      ...super.getDetails(includeIdentifiers),\n      fillColor: this.fillColor,\n      enableFill: this.enableFill,\n      r1: this.r1,\n      r2: this.r2,\n    } as T extends true ? EllipseProps : Omit<EllipseProps, 'id' & 'layer'>\n  }\n\n  public getBoundingRect() {\n    const {x: cx, y: cy, r1, r2, rotation} = this\n\n    return generateBoundingRectFromRotatedRect({\n      x: cx - r1,\n      y: cy - r2,\n      width: r1 * 2,\n      height: r2 * 2,\n    }, rotation)\n  }\n\n  public getRect(): CenterBasedRect {\n    const {x, y, r1, r2} = this\n\n    return {\n      x,\n      y,\n      width: r1 * 2,\n      height: r2 * 2,\n    }\n  }\n\n  public getSelectedBoxModule(lineWidth: number, lineColor: string): Rectangle {\n    const {id, rotation, layer} = this\n\n    const rectProp = {\n      ...this.getRect(),\n      lineColor,\n      lineWidth,\n      rotation,\n      layer,\n      id: id + '-selected-box',\n      opacity: 0,\n    }\n\n    return new Rectangle(rectProp)\n  }\n\n  public getHighlightModule(lineWidth: number, lineColor: string) {\n    const {x, y, r1, r2, rotation, layer, id} = this\n\n    return new Ellipse({\n      x,\n      y,\n      r1,\n      r2,\n      lineColor,\n      lineWidth,\n      rotation,\n      layer,\n      id: id + 'highlight',\n      opacity: 0,\n    })\n  }\n\n  public getOperators(\n    resizeConfig: { lineWidth: number, lineColor: string, size: number, fillColor: string },\n    rotateConfig: { lineWidth: number, lineColor: string, size: number, fillColor: string },\n  ) {\n    return super.getOperators(resizeConfig, rotateConfig, this.getRect(), this.getDetails(true),\n    )\n  }\n\n  public getSnapPoints(): SnapPointData[] {\n    const {x: cx, y: cy, r1, r2, id} = this\n\n    // Define snap points: center, cardinal edge points (top, right, bottom, left)\n    const points: SnapPointData[] = [\n      {id, x: cx, y: cy, type: 'center'},\n      {id, x: cx, y: cy - r2, type: 'edge-top'},\n      {id, x: cx + r1, y: cy, type: 'edge-right'},\n      {id, x: cx, y: cy + r2, type: 'edge-bottom'},\n      {id, x: cx - r1, y: cy, type: 'edge-left'},\n    ]\n\n    return points\n  }\n\n  render(ctx: CanvasRenderingContext2D) {\n    let {x, y, r1, r2, opacity, fillColor, rotation, dashLine, gradient} = this.getDetails()\n    const {\n      lineWidth,\n      lineColor,\n    } = super.getDetails()\n\n    x = Math.round(x)\n    y = Math.round(y)\n    r1 = Math.round(r1)\n    r2 = Math.round(r2)\n\n    // Save current context state to avoid transformations affecting other drawings\n    ctx.save()\n    // Move context to the circle's center\n    ctx.translate(x, y)\n\n    // Apply rotation if needed\n    if (rotation !== 0) {\n      ctx.rotate(rotation! * Math.PI / 180) // Convert to radians\n    }\n\n    // Apply fill style if enabled\n    if (opacity > 0) {\n      ctx.fillStyle = fillColor as string\n      ctx.globalAlpha = opacity / 100 // Set the opacity\n    }\n\n    // Apply stroke style if enabled\n    if (lineWidth > 0) {\n      ctx.lineWidth = lineWidth\n      ctx.strokeStyle = lineColor\n      ctx.lineJoin = 'round'\n    }\n\n    // Draw circle\n    ctx.beginPath()\n    ctx.ellipse(0, 0, r1, r2, 0, 0, Math.PI * 2) // Ellipse for circle (can use same radius for both axes)\n\n    if (dashLine) {\n      ctx.setLineDash([3, 5]) // Apply dashed line pattern\n    } else {\n      ctx.setLineDash([]) // Reset line dash if no dashLine\n    }\n\n    ctx.closePath()\n\n    // Fill if enabled\n    if (opacity > 0) {\n      ctx.fill()\n    }\n\n    // Stroke if enabled\n    if (lineWidth > 0) {\n      ctx.stroke()\n    }\n\n    // Apply gradient if provided\n    if (gradient) {\n      ctx.fillStyle = gradient // Use gradient for fill\n      if (opacity > 0) {\n        ctx.fill() // Fill with gradient\n      }\n    }\n\n    // Restore the context to avoid affecting subsequent drawings\n    ctx.restore()\n  }\n}\n\nexport default Ellipse","\ninterface CloneOptions {\n  clonePrototype?: boolean;\n}\n\nfunction deepClone<T>(obj: T, options: CloneOptions = {}): T {\n  if (typeof obj !== 'object' || obj === null) {\n    return obj\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(item => deepClone(item, options)) as T\n  }\n\n  const clone = Object.create(options.clonePrototype ? Object.getPrototypeOf(obj) : null)\n\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      clone[key] = deepClone(obj[key], options)\n    }\n  }\n\n  return clone\n}\n\nexport default deepClone","import Editor from '../editor'\nimport Rectangle from '../../core/modules/shapes/rectangle'\nimport Ellipse, {EllipseProps} from '../../core/modules/shapes/ellipse'\nimport deepClone from '../../lib/deepClone'\nimport {ModuleInstance, ModuleMap, ModuleProps} from '../../core/modules/type'\nimport {UID} from '../../core/type'\nimport {Point} from '../../type'\n\nexport function batchCreate(this: Editor, moduleDataList: ModuleProps[]): ModuleMap {\n  const clonedData = deepClone(moduleDataList) as ModuleProps[]\n  const newMap: ModuleMap = new Map()\n  let localMaxLayer = 0\n\n  const create = (data: ModuleProps) => {\n    if (!data.id) {\n      data.id = this.createModuleId\n    }\n\n    if (isNaN(data.layer)) {\n      const maxFromModuleMap = this.getMaxLayerIndex\n\n      localMaxLayer = Math.max(localMaxLayer, maxFromModuleMap)\n      localMaxLayer++\n\n      data.layer = localMaxLayer\n    }\n\n    if (data.type === 'rectangle') {\n      return new Rectangle(data)\n    }\n\n    if (data.type === 'ellipse') {\n      return new Ellipse(data as EllipseProps)\n    }\n  }\n\n  clonedData.forEach(data => {\n    const module = create.call(this, data)\n\n    newMap.set(data.id, module as ModuleInstance)\n  })\n\n  return newMap\n}\n\nexport function batchAdd(this: Editor, modules: ModuleMap): ModuleMap {\n  modules.forEach(mod => {\n    this.moduleMap.set(mod.id, mod)\n  })\n\n  // this.events.onModulesUpdated?.(this.moduleMap)\n\n  return modules\n}\n\ntype BatchCopyFn = <T extends boolean>(this: Editor, idSet: Set<UID>, includeIdentifiers: T) => T extends true ? ModuleProps[] : Omit<ModuleProps, 'id' & 'layer'>[]\n\nexport const batchCopy: BatchCopyFn = function (this, idSet, includeIdentifiers):ModuleProps[] {\n  const modulesMap: ModuleMap = new Map()\n  const moduleArr: ModuleInstance[] = []\n\n  idSet.forEach(id => {\n    const mod = this.moduleMap.get(id)\n    if (mod) {\n      moduleArr.push(mod)\n      modulesMap.set(id, mod)\n    }\n  })\n\n  moduleArr.sort((a, b) => a.layer - b.layer)\n\n  return moduleArr.map(mod => mod.getDetails(includeIdentifiers)) as ModuleProps[]\n}\n\nexport function batchDelete(this: Editor, idSet: Set<UID>): ModuleProps[] {\n  const backup: ModuleProps[] = this.batchCopy(idSet)\n\n  backup.forEach(module => {\n    this.moduleMap.delete(module.id)\n  })\n\n  // this.events.onModulesUpdated?.(this.moduleMap)\n\n  return backup\n}\n\nexport function batchMove(this: Editor, from: Set<UID>, delta: Point) {\n  const modulesMap: ModuleMap = this.getModulesByIdSet(from)\n\n  modulesMap.forEach((module: ModuleInstance) => {\n    module.x += delta.x\n    module.y += delta.y\n  })\n}\n\nexport function batchModify(this: Editor, idSet: Set<UID>, data: Partial<ModuleProps>) {\n  const modulesMap = this.getModulesByIdSet(idSet)\n\n  modulesMap.forEach((module: ModuleInstance) => {\n    Object.keys(data).forEach((key) => {\n      const keyName = key as keyof Omit<ModuleProps, 'type'>\n      module[keyName] = data[keyName]\n    })\n  })\n}\n","/**\n * Utility function to get the JSON standard type of a given variable as a string.\n *\n * @returns The JSON standard type of the variable in string form (e.g., \"string\", \"number\").\n * @param value\n */\nfunction typeCheck(value: unknown): string {\n  if (value === null) {\n    return 'null'\n  }\n\n  if (value === undefined) {\n    return 'undefined'\n  }\n\n  if (value instanceof Set) {\n    return 'set'\n  }\n\n  if (value instanceof Map) {\n    return 'map'\n  }\n\n  if (Array.isArray(value)) {\n    return 'array'\n  }\n\n  if (value instanceof Date) {\n    return 'date'\n  }\n\n  if (value instanceof RegExp) {\n    return 'regexp'\n  }\n\n  if (value instanceof Error) {\n    return 'error'\n  }\n\n  if (value instanceof Promise) {\n    return 'promise'\n  }\n\n  if (value instanceof ArrayBuffer) {\n    return 'arraybuffer'\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return 'typedarray' // Includes Int8Array, Uint8Array, etc.\n  }\n\n  if (value instanceof WeakSet) {\n    return 'weakset'\n  }\n\n  if (value instanceof WeakMap) {\n    return 'weakmap'\n  }\n\n  if (typeof value === 'function') {\n    return 'function'\n  }\n\n  if (typeof value === 'symbol') {\n    return 'symbol'\n  }\n\n  if (typeof value === 'bigint') {\n    return 'bigint'\n  }\n\n  if (typeof value === 'object') {\n    return 'object' // For plain objects\n  }\n\n  return typeof value // For primitive types like string, number, boolean, etc.\n}\n\nexport default typeCheck","import {SelectionActionMode} from './type'\nimport Editor from '../editor'\nimport typeCheck from '../../lib/typeCheck'\nimport {UID} from '../../core/type'\n\nexport function modifySelected(\n  this: Editor,\n  idSet: Set<UID>,\n  action: SelectionActionMode,\n) {\n  if (typeCheck(idSet) !== 'set') return\n\n  const realSelectedModules = this.getSelected\n\n  this.selectedModules.clear()\n\n  if (action === 'replace') {\n    realSelectedModules.clear()\n  }\n\n  idSet.forEach((id) => {\n    switch (action) {\n      case 'add':\n        realSelectedModules.add(id)\n        break\n      case 'delete':\n        realSelectedModules.delete(id)\n        break\n      case 'toggle':\n        if (realSelectedModules.has(id)) {\n          realSelectedModules.delete(id)\n        } else {\n          realSelectedModules.add(id)\n        }\n        break\n      case 'replace':\n        realSelectedModules.add(id)\n        break\n    }\n  })\n\n  realSelectedModules.forEach((id) => this.selectedModules.add(id))\n  // this.events.onSelectionUpdated?.(idSet, eventCallBackData)\n}\n\n/*export function updateSelectionCanvasRenderData(this: Editor) {\n  const moduleProps = this.getSelectedPropsIfUnique\n\n  return\n  if (moduleProps) {\n    const module = this.moduleMap.get(moduleProps.id)\n    const {scale, dpr} = this.viewport\n    const lineWidth = 1 / scale * dpr\n    const resizeSize = 2 / scale * dpr\n    const lineColor = '#5491f8'\n\n    const o = module!.getOperators({\n      size: resizeSize,\n      lineColor,\n      lineWidth,\n    }, {\n      size: 1,\n      lineColor: '',\n      lineWidth: 0,\n    })\n\n    o.forEach(\n      (p) => {\n        this.operationHandlers.add(p)\n      },\n    )\n  }\n}*/\n","import Editor from '../editor'\nimport {ResizeDirection} from '../selection/type'\nimport {UID} from '../../core/type'\nimport {Point, Rect} from '../../type'\n\nexport interface InitViewportDomReturn {\n  wrapper: HTMLDivElement\n  selectionBox: HTMLDivElement\n  mainCanvas: HTMLCanvasElement\n  selectionCanvas: HTMLCanvasElement\n  scrollBarX: HTMLDivElement\n  scrollBarY: HTMLDivElement\n  cursor: HTMLDivElement\n}\n\nconst createWith = <T extends keyof HTMLElementTagNameMap>(tagName: T, role: string, id: string): HTMLElementTagNameMap[T] => {\n  const dom = document.createElement(tagName)\n  dom.setAttribute(role, '')\n  dom.id = role + '-' + id\n\n  return dom\n}\n\nexport function initViewportDom(id: UID): InitViewportDomReturn {\n  const boxColor = '#1FB3FF'\n  const boxBgColor = 'rgba(31,180,255,0.1)'\n  const wrapper = createWith('div', 'editor-wrapper', id)\n  const mainCanvas = createWith('canvas', 'editor-main-canvas', id)\n  const selectionCanvas = createWith('canvas', 'editor-selection-canvas', id)\n  const scrollBarX = createWith('div', 'scroll-bar-x', id)\n  const scrollBarY = createWith('div', 'scroll-bar-x', id)\n  const selectionBox = createWith('div', 'editor-selection-box', id)\n  const cursor = createWith('div', 'editor-cursor', id)\n  const cssText = createWith('style', 'editor-style', id)\n\n  cssText.textContent = `\n    #${mainCanvas.id} {\n      background-color: #f0f0f0;\n      position: absolute;\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n      pointer-events: none;\n    }\n\n    #${selectionCanvas.id} {\n      position: absolute;\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n      pointer-events: none;\n    }\n\n    #${wrapper.id} {\n      user-select: none;\n      position: relative;\n      scrollbar-width: thin;\n      scrollbar-color: #787878 transparent;\n      overflow: hidden;\n      width: 100%;\n      height: 100%;\n    }\n\n    #${selectionBox.id} {\n      display: none;\n      pointer-events: none;\n      position: absolute;\n      border: 1px solid ${boxColor};\n      background-color: ${boxBgColor};\n    }\n    \n    #${scrollBarX.id},\n    #${scrollBarY.id}{\n      background-color: #787878;\n      user-select:none;\n      translate:none;\n    }\n    \n    #${cursor.id}{\n      display: none;\n      pointer-events: none;\n      width:20px;\n      height:20px;\n    }\n    \n    #${cursor.id} svg{\n      width:18px;\n      height:18px;\n    }\n  `\n\n  wrapper.append(mainCanvas, selectionCanvas, scrollBarX, scrollBarY, selectionBox, cursor, cssText)\n\n  return {\n    wrapper,\n    selectionBox,\n    selectionCanvas,\n    mainCanvas,\n    scrollBarX,\n    scrollBarY,\n    cursor,\n  }\n}\n\nexport const updateScrollBars = (scrollBarX: HTMLDivElement, scrollBarY: HTMLDivElement) => {\n  scrollBarX.style.width = '50px'\n  scrollBarX.style.height = '6px'\n  scrollBarX.style.position = 'absolute'\n  scrollBarX.style.bottom = '0'\n  scrollBarX.style.left = '0'\n\n  scrollBarY.style.width = '6px'\n  scrollBarY.style.height = '50px'\n  scrollBarY.style.position = 'absolute'\n  scrollBarY.style.right = '0'\n  scrollBarY.style.top = '0'\n}\n\nexport const updateSelectionBox = (selectionBox: HTMLDivElement, {x, y, height, width}: Rect, show = true) => {\n  selectionBox.style.transform = `translate(${x}px, ${y}px)`\n  selectionBox.style.width = width + 'px'\n  selectionBox.style.height = height + 'px'\n  selectionBox.style.display = show ? 'block' : 'none'\n}\n\nexport function updateCursor(this: Editor, type: 'rotate' | 'resize' | 'default' | 'grabbing', position?: Point | ResizeDirection, angle?: number) {\n  const {wrapper, cursor} = this.viewport\n\n  if (type === 'default') {\n    // debugger\n    wrapper.style.cursor = 'default'\n    cursor.style.display = 'none'\n    return\n  }\n\n  if (type === 'resize') {\n    wrapper.style.cursor = `${position as ResizeDirection}-resize`\n    cursor.style.display = 'none'\n    return\n  }\n\n  if (type === 'grabbing') {\n    wrapper.style.cursor = `grabbing`\n    cursor.style.display = 'none'\n    return\n  }\n\n  wrapper.style.cursor = 'none'\n\n  if (type === 'rotate') {\n    const size = 24\n    const offset = size / 2\n    const {x, y} = position as Point\n    cursor.innerHTML = `\n       <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 18.99 18.93\">\n  <path d=\"M15.57,16.04c.48-.57,1-1.1,1.5-1.65.35-.38.54-.85,1.15-.82.72.04,1.01.78.55,1.34-1.07,1.3-2.37,2.5-3.44,3.82-.69.48-1.09,0-1.56-.48-.91-.95-1.92-2.07-2.78-3.07-.3-.35-.58-.72-.33-1.19.39-.73,1.08-.39,1.53.07.52.55,1.01,1.17,1.51,1.74.07.08.17.19.26.22,0-.81.02-1.64-.08-2.44-.51-4.07-3.48-7.36-7.47-8.32-1.12-.27-2.22-.25-3.37-.24.15.2.34.39.52.56.51.47,1.2.95,1.66,1.44.69.73-.3,1.84-1.1,1.19-.91-.74-1.83-1.68-2.7-2.48-.38-.35-1.06-.81-1.29-1.26-.21-.4-.1-.54.14-.89C1.59,2.57,2.79,1.18,4.11.18c.76-.58,1.72.38,1.13,1.14l-2.3,2.09c.76.04,1.52-.01,2.28.06,5.2.47,9.42,4.43,10.22,9.59.15.99.1,1.98.14,2.98Z\"/>\n</svg>\n  `\n\n    // for svg icon direction\n    angle! += 45\n\n    cursor.style.display = 'block'\n    cursor.style.transformOrigin = 'center center'\n    cursor.style.transform = `translate(${x - offset}px, ${y - offset}px) rotate(${angle}deg)`\n  }\n}","import Rectangle from '../../core/modules/shapes/rectangle'\n// import {drawCrossLine} from '../../lib/lib'\nimport Editor from '../editor'\nimport {ModuleInstance} from '../../core/modules/type'\nimport {UID} from '../../core/type'\n\nfunction selectionRender(this: Editor) {\n  if (this.moduleMap.size === 0) return\n\n  const {selectionCTX: ctx} = this.viewport\n  const fillColor = '#5491f8'\n  const lineColor = '#5491f8'\n  const selected = this.getVisibleSelected\n  const centerPointWidth = 2 / this.viewport.scale * this.viewport.dpr\n  const lineWidth = 1 / this.viewport.scale * this.viewport.dpr\n  const centerPoints = new Set<UID>(selected)\n\n  if (this.hoveredModule) {\n    centerPoints.add(this.hoveredModule)\n  }\n\n  // render selection box for modules\n  selected.forEach((id) => {\n    const module = this.moduleMap.get(id)\n\n    if (module) {\n      const moduleSelectionBoundary = module.getSelectedBoxModule(lineWidth, lineColor)\n      moduleSelectionBoundary.render(ctx)\n    }\n  })\n\n  // render center points\n  centerPoints.forEach((id) => {\n    const module = this.moduleMap.get(id)\n    const {x, y, rotation, layer} = (module as Rectangle).getDetails()\n    const lineWidth = 1 / this.viewport.scale * this.viewport.dpr\n    const highlightModule = module!.getHighlightModule(lineWidth, fillColor) as ModuleInstance\n    const centerDotRect = new Rectangle({\n      x,\n      y,\n      layer,\n      id: id + 'hover-center',\n      width: centerPointWidth * 2,\n      height: centerPointWidth * 2,\n      fillColor: fillColor,\n      lineColor: 'transparent',\n      lineWidth,\n      rotation,\n      opacity: 100,\n      radius: id === this.hoveredModule ? centerPointWidth : 0,\n    })\n\n    highlightModule!.render(ctx)\n    centerDotRect.render(ctx)\n  })\n\n  this.operationHandlers.forEach(operation => {\n    operation.module.render(ctx)\n  })\n\n  /*if (this.viewport.enableCrossLine && this.viewport.drawCrossLine) {\n    drawCrossLine({\n      ctx,\n      mousePoint: mouseMovePoint,\n      scale,\n      dpr,\n      offset,\n      worldRect: worldRect,\n    })\n  }*/\n}\n\nexport default selectionRender","import Editor from '../../editor'\nimport {ResizeDirection} from '../../selection/type'\nimport {ModuleInstance} from '../../../core/modules/type'\nimport {UID} from '../../../core/type'\nimport {Point} from '../../../type'\n\nexport function detectHoveredModule(this: Editor) {\n  const {viewport} = this\n  const worldPoint = this.getWorldPointByViewportPoint(\n    viewport.mouseMovePoint.x,\n    viewport.mouseMovePoint.y,\n  )\n  // const maxLayer = Number.MIN_SAFE_INTEGER\n  let moduleId: UID | null = null\n  let hitOn = null\n  const arr = [...this.operationHandlers]\n\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i].module.hitTest(worldPoint)) {\n      hitOn = arr[i]\n      break\n    }\n  }\n\n  if (hitOn) {\n    this.action.dispatch('module-hover-enter', hitOn.id)\n    return hitOn\n  }\n\n  const arr2 = [...this.getVisibleModuleMap.values()]\n\n  for (let i = arr2.length - 1; i >= 0; i--) {\n    const module = arr2[i]\n    const hitTest = module.hitTest(worldPoint)\n    if (hitTest) {\n      // console.log(hitTest)\n      moduleId = module.id\n      break\n    }\n  }\n\n  if (this.hoveredModule !== moduleId) {\n    if (this.hoveredModule) {\n      this.action.dispatch('module-hover-leave', this.hoveredModule)\n    }\n\n    if (moduleId) {\n      this.action.dispatch('module-hover-enter', moduleId)\n    }\n  }\n}\n\nexport function applyResize(this: Editor, altKey: boolean, shiftKey: boolean) {\n  const {mouseDownPoint, mouseMovePoint, scale, dpr} = this.viewport\n  const {\n    name: handleName,\n    module: {rotation},\n    moduleOrigin,\n  } = this._resizingOperator!\n  const {id} = moduleOrigin\n  const resizeParam = {\n    downPoint: mouseDownPoint,\n    movePoint: mouseMovePoint,\n    dpr,\n    scale,\n    rotation,\n    handleName,\n    altKey,\n    shiftKey,\n    moduleOrigin,\n  }\n\n  const relatedModule = this.moduleMap.get(id)\n\n  if (relatedModule) {\n    const con = relatedModule.constructor as ModuleInstance\n    // console.log(resizeParam)\n    return con.applyResizeTransform(resizeParam)\n  }/*\n  if (type === 'rectangle') {\n    return Rectangle.applyResizeTransform(resizeParam)\n  }*/\n}\n\nexport function getRotateAngle(centerPoint: Point, mousePoint: Point) {\n  const dx = mousePoint!.x - centerPoint.x\n  const dy = mousePoint!.y - centerPoint.y\n  const angleRad = Math.atan2(dy, dx)\n  const angleDeg = angleRad * (180 / Math.PI)\n  let normalizedAngle = angleDeg\n  if (normalizedAngle < 0) normalizedAngle += 360\n  return normalizedAngle\n}\n\nexport function getResizeCursor(point: Point, centerPoint: Point): ResizeDirection {\n  const angle = getRotateAngle(centerPoint, point)\n\n  if ((angle >= 337.5 && angle <= 360) || (angle >= 0 && angle < 22.5)) return 'e' as ResizeDirection\n  if (angle >= 22.5 && angle < 67.5) return 'se' as ResizeDirection\n  if (angle >= 67.5 && angle < 112.5) return 's' as ResizeDirection\n  if (angle >= 112.5 && angle < 157.5) return 'sw' as ResizeDirection\n  if (angle >= 157.5 && angle < 202.5) return 'w' as ResizeDirection\n  if (angle >= 202.5 && angle < 247.5) return 'nw' as ResizeDirection\n  if (angle >= 247.5 && angle < 292.5) return 'n' as ResizeDirection\n  if (angle >= 292.5 && angle < 337.5) return 'ne' as ResizeDirection\n\n  return 'e' as ResizeDirection // fallback\n}","import Editor from '../../editor'\nimport {detectHoveredModule} from './funcs'\n\nfunction handleMouseDown(this: Editor, e: MouseEvent) {\n  const {shiftKey, clientY, target, button, clientX, metaKey, ctrlKey} =\n    e\n  if (!(target === this.viewport.wrapper)) return\n  // const inViewport = target === this.viewport.wrapper\n  // const isLeftClick = button !== 0\n  const modifyKey = ctrlKey || metaKey || shiftKey\n\n  const x = clientX - this.viewport.rect!.x\n  const y = clientY - this.viewport.rect!.y\n\n  this.viewport.mouseDownPoint.x = x\n  this.viewport.mouseDownPoint.y = y\n  this.viewport.mouseMovePoint.x = x\n  this.viewport.mouseMovePoint.y = y\n\n  const operator = detectHoveredModule.call(this)\n  // console.log(operator)\n  e.preventDefault()\n  if (button !== 0) return\n\n  if (this.viewport.spaceKeyDown) {\n    return (this.manipulationStatus = 'panning')\n  }\n\n  if (operator) {\n    if (operator.type === 'resize') {\n      this._resizingOperator = operator\n      return (this.manipulationStatus = 'resizing')\n    } else if (operator.type === 'rotate') {\n      this._rotatingOperator = operator\n      return (this.manipulationStatus = 'rotating')\n    }\n  }\n\n  const hoveredModule = this.hoveredModule\n  // console.log(hoveredModule)\n  // Click on blank area and not doing multi-selection\n  if (!hoveredModule) {\n    // Determine clear selected modules\n    if (!modifyKey) {\n      this.action.dispatch('selection-clear')\n    }\n    this.selectedShadow = this.getSelected\n    // console.warn(this.selectedShadow)\n    return (this.manipulationStatus = 'selecting')\n  }\n\n  this.manipulationStatus = 'dragging'\n  const realSelected = this.getSelected\n\n  // this.draggingModules = new Set(this.selectedModules)\n  const isSelected = realSelected.has(hoveredModule)\n  // console.log(isSelected)\n  if (realSelected.size === 0 || (!isSelected && !modifyKey)) {\n    // Initial selection or replace selection without modifier key\n    this.action.dispatch('selection-modify', {\n      mode: 'replace',\n      idSet: new Set([hoveredModule]),\n    })\n    this.draggingModules = new Set([hoveredModule])\n  } else if (modifyKey) {\n    this.draggingModules = new Set(realSelected)\n\n    if (isSelected) {\n      console.log('isSelected', isSelected)\n      this._deselection = hoveredModule\n      this.draggingModules.add(hoveredModule)\n    } else {\n      // Add to existing selection\n      this.action.dispatch('selection-modify', {\n        mode: 'add',\n        idSet: new Set([hoveredModule]),\n      })\n    }\n    this.draggingModules.add(hoveredModule)\n  } else {\n    // Dragging already selected module(s)\n    this.draggingModules = new Set(realSelected)\n  }\n}\n\nexport default handleMouseDown\n","import {updateCursor, updateSelectionBox} from '../domManipulations'\nimport Editor from '../../editor'\nimport {ModuleModifyData} from '../../actions/type'\nimport Base from '../../../core/modules/base'\nimport {applyResize} from './funcs'\nimport {ModuleProps} from '../../../core/modules/type'\n\nfunction handleMouseUp(this: Editor, e: MouseEvent) {\n  const leftMouseClick = e.button === 0\n\n  if (leftMouseClick) {\n    const {\n      draggingModules,\n      manipulationStatus,\n      moduleMap,\n      _selectingModules,\n      selectedShadow,\n      viewport,\n    } = this\n    const x = e.clientX - viewport.rect!.x\n    const y = e.clientY - viewport.rect!.y\n    const modifyKey = e.ctrlKey || e.metaKey || e.shiftKey\n    // console.log('up',manipulationStatus)\n    viewport.mouseMovePoint.x = x\n    viewport.mouseMovePoint.y = y\n\n    switch (manipulationStatus) {\n      case 'selecting':\n        break\n\n      case 'panning':\n        updateCursor.call(this, 'grabbing')\n        // this.viewport.translateViewport(e.movementX, e.movementY)\n\n        break\n\n      case 'dragging': {\n        const x = ((viewport.mouseMovePoint.x - viewport.mouseDownPoint.x) *\n            viewport.dpr) /\n          viewport.scale\n        const y = ((viewport.mouseMovePoint.y - viewport.mouseDownPoint.y) *\n            viewport.dpr) /\n          viewport.scale\n        const moved = !(x === 0 && y === 0)\n\n        // mouse stay static\n        if (moved) {\n          const changes: ModuleModifyData[] = []\n          this.action.dispatch('module-modifying', {\n            type: 'move',\n            data: {x: -x, y: -y},\n          })\n\n          // Move back to origin position and do the move again\n          draggingModules.forEach((id) => {\n            const module = moduleMap.get(id)\n\n            if (module) {\n              const change: ModuleModifyData = {\n                id,\n                props: {\n                  x: module.x + x,\n                  y: module.y + y,\n                },\n              }\n\n              changes.push(change)\n            }\n          })\n\n          this.action.dispatch('module-modify', changes)\n        } else {\n          const closestId = this.hoveredModule\n\n          if (closestId && modifyKey && closestId === this._deselection) {\n            this.action.dispatch('selection-modify', {\n              mode: 'toggle',\n              idSet: new Set([closestId]),\n            })\n          }\n        }\n      }\n        break\n\n      case 'resizing': {\n        const {altKey, shiftKey} = e\n        const props = applyResize.call(this, altKey, shiftKey)\n        const moduleOrigin = this._resizingOperator?.moduleOrigin\n        const rollbackProps: Partial<ModuleProps> = {}\n\n        Object.keys(props).forEach(<K extends keyof ModuleProps>(key: K) => {\n          rollbackProps[key] = moduleOrigin[key]\n        })\n\n        // rotate back\n        this.action.dispatch('module-modifying', {\n          type: 'resize',\n          data: rollbackProps,\n        })\n\n        this.action.dispatch('module-modify', [{\n          id: this._resizingOperator!.id,\n          props,\n        }])\n      }\n        break\n\n      case 'rotating': {\n        const {shiftKey} = e\n        const newRotation = Base.applyRotating.call(this, shiftKey)\n        const {rotation} = this._rotatingOperator?.moduleOrigin!\n        const rollbackProps: Partial<ModuleProps> = {rotation}\n\n        // rotate back\n        this.action.dispatch('module-modifying', {\n          type: 'resize',\n          data: rollbackProps,\n        })\n\n        this.action.dispatch('module-modify', [{\n          id: this._rotatingOperator!.id,\n          props: {rotation: newRotation},\n        }])\n      }\n        break\n\n      case 'waiting':\n        this.action.dispatch('selection-clear')\n        break\n      case 'static':\n        if (e.ctrlKey || e.metaKey || e.shiftKey) {\n          this.toggleSelected(draggingModules)\n        } else {\n          this.replaceSelected(draggingModules)\n        }\n\n        break\n    }\n\n    draggingModules.clear()\n    selectedShadow.clear()\n    _selectingModules.clear()\n    _selectingModules.clear()\n    this.manipulationStatus = 'static'\n    this._deselection = null\n    this._resizingOperator = null\n\n    updateSelectionBox(\n      viewport.selectionBox,\n      {x: 0, y: 0, width: 0, height: 0},\n      false,\n    )\n  }\n\n}\n\nexport default handleMouseUp\n","import Editor from '../../editor'\nimport {applyResize} from './funcs'\nimport {updateCursor} from '../domManipulations'\n\n// import {updateSelectionBox} from \"../domManipulations\"\n\nfunction handleKeyDown(this: Editor, e: KeyboardEvent) {\n  // const _t = e.target !== this.wrapper\n  if (this.manipulationStatus === 'panning' || this.manipulationStatus === 'selecting') return\n\n  if (e.code === 'Space') {\n    this.viewport.spaceKeyDown = true\n    updateCursor.call(this, 'grabbing')\n    // this.viewport.wrapper.style.cursor = 'grabbing'\n    e.preventDefault()\n    return\n  }\n\n  if (this.manipulationStatus === 'resizing') {\n    const {altKey, shiftKey} = e\n\n    const r = applyResize.call(this, altKey, shiftKey)\n\n    this.action.dispatch('module-modifying', {\n      type: 'resize',\n      data: r,\n    })\n  }\n\n}\n\nexport default handleKeyDown\n\n","import Editor from '../../editor'\nimport {applyResize} from './funcs'\n\n// import {updateSelectionBox} from \"../domManipulations\"\n\nfunction handleKeyUp(this: Editor, e: KeyboardEvent) {\n  if (e.code === 'Space') {\n    this.viewport.spaceKeyDown = false\n    this.viewport.wrapper.style.cursor = 'default'\n  }\n\n  if (this.manipulationStatus === 'resizing') {\n    const {altKey, shiftKey} = e\n\n    const r = applyResize.call(this, altKey, shiftKey)\n\n    this.action.dispatch('module-modifying', {\n      type: 'resize',\n      data: r,\n    })\n  }\n}\n\nexport default handleKeyUp\n\n","import {isNegativeZero} from '../../../core/utils'\nimport Editor from '../../editor'\n\nfunction handleWheel(this: Editor, event: WheelEvent) {\n  // Prevent page zoom\n  if ((event.target as HTMLElement) !== this.viewport.wrapper) return\n  // console.log(this.manipulationStatus)\n  event.preventDefault()\n  event.stopPropagation()\n  if (this.manipulationStatus !== 'static') return\n  const {trackpad, zooming, panning, scrolling, zoomFactor, translateX, translateY} =\n    detectGestures(event)\n\n  console.log(trackpad)\n  // console.log(`${zooming ? 'zooming' : ''} ${panning ? 'panning' : ''} ${scrolling ? 'scrolling' : ''} `)\n\n  this.viewport.zooming = zooming\n\n  if (zooming) {\n    // console.log(zoomFactor)\n    this.action.dispatch('world-zoom', {\n      zoomBy:true,\n      zoomFactor,\n      physicalPoint: this.viewport.mouseMovePoint,\n    })\n  } else if (panning || scrolling) {\n    this.action.dispatch('world-shift', {\n      x: translateX,\n      y: translateY,\n    })\n    // this.translateViewport(translateX, translateY)\n  }\n\n  this.updateWorldRect()\n}\n\nconst detectGestures = (() => {\n  let _timer: number | undefined\n  const DELAY = 200\n  // let shiftX: number = 0\n  // let shiftY: number = 0\n  const ACTION_THRESHOLD = 3\n  const EVENT_BUFFER: WheelEvent[] = []\n  let zooming = false\n  let panning = false\n  let scrolling = false\n  let zoomFactor = 0\n  let translateX = 0\n  let translateY = 0\n  let gestureLock = false\n  const zoomSpeedA = 0.01\n  const zoomSpeedB = 0.1\n  let trackpad = false\n\n  return (event: WheelEvent) => {\n    const {deltaX, deltaY, altKey} = event\n    if (_timer) {\n      clearTimeout(_timer)\n    }\n\n    if (gestureLock) {\n      EVENT_BUFFER.length = 0\n    } else {\n      EVENT_BUFFER.push(event)\n    }\n\n    translateX = 0\n    translateY = 0\n    zooming = false\n    scrolling = false\n    panning = false\n    console.log(deltaX, deltaY)\n\n    if (altKey) {\n      zooming = true\n      // zoomFactor = ~~deltaY < 0 ? -.1 : .1\n    }\n\n    if (EVENT_BUFFER.length >= ACTION_THRESHOLD) {\n      // detect zooming\n      const allXAreMinusZero = EVENT_BUFFER.every((e) =>\n        isNegativeZero(e.deltaX),\n      )\n      const allYAreFloat = EVENT_BUFFER.every((e) => isFloat(e.deltaY))\n      const absBiggerThan4 = EVENT_BUFFER.every((e) => Math.abs(e.deltaY) > 4)\n\n      // console.log('detect zooming')\n\n      if (allXAreMinusZero && allYAreFloat && !absBiggerThan4) {\n        gestureLock = true\n        trackpad = true\n        console.log('touchpadZoomingLock')\n        // console.log([...EVENT_BUFFER])\n        // zoomFactor = deltaY > 0 ? -.1 : .1\n        // zooming = true\n      }\n    }\n\n    /**\n     * Wheel deltaX deltaY\n     * 1. touchpad\n     *  panning\n     *    x: UInt\n     *    y: UInt\n     *  zoom\n     *    x === -0\n     *    y: Float\n     * 2. mouse scroll\n     *    2.1 vertical scroll\n     *      x === -0\n     *      y: Float, abs(value) > 4, and increasing\n     *    2.2 horizontal scroll\n     *      x: UInt, increasing and abs(v) > 40\n     *      y === -0\n     */\n    if (gestureLock) {\n      // console.log('hit')\n      zoomFactor = deltaY > 0 ? -zoomSpeedA : zoomSpeedA\n      zooming = true\n    } else if (Math.abs(deltaX) >= 40 && isNegativeZero(deltaY)) {\n      // Mouse horizontal scrolling\n      // console.log('hor scroll', deltaX)\n      if (altKey) {\n        zoomFactor = deltaX < 0 ? zoomSpeedB : -zoomSpeedB\n      } else {\n        scrolling = true\n        translateX = -deltaX\n      }\n    } else if (\n      isNegativeZero(deltaX) &&\n      isFloat(deltaY) &&\n      Math.abs(deltaY) > 4\n    ) {\n      // Vertical scrolling\n      // console.log('ver scrolling', deltaX)\n      if (altKey) {\n        zoomFactor = deltaY < 0 ? zoomSpeedA : -zoomSpeedA\n      } else {\n        scrolling = true\n        translateY = -deltaY\n      }\n    } else if (isUInt(deltaX) && isUInt(deltaY)) {\n      // panning\n      if (altKey) {\n        const max = Math.abs(deltaX) > Math.abs(deltaY) ? deltaX : deltaY\n\n        zoomFactor = max < 0 ? zoomSpeedA : -zoomSpeedA\n      } else {\n        // console.log('panning')\n        panning = true\n        translateX = -deltaX\n        translateY = -deltaY\n      }\n    }\n\n    if (zooming && altKey) {\n      zoomFactor = zoomFactor < 0 ? -zoomSpeedB : zoomSpeedB\n    }\n\n    _timer = setTimeout(() => {\n      gestureLock = false\n      zooming = false\n      panning = false\n      scrolling = false\n      zoomFactor = 0\n      translateX = 0\n      translateY = 0\n      EVENT_BUFFER.length = 0\n    }, DELAY)\n\n    return {\n      trackpad,\n      zooming,\n      panning,\n      scrolling,\n      zoomFactor,\n      translateX,\n      translateY,\n    }\n  }\n})()\n\nfunction isUInt(v: number) {\n  return !isFloat(v)\n}\n\nfunction isFloat(v: number) {\n  return Math.abs(v) % 1 !== 0\n}\n\nexport default handleWheel\n","import {updateCursor, updateSelectionBox} from '../domManipulations'\nimport {generateBoundingRectFromTwoPoints} from '../../../core/utils'\nimport Editor from '../../editor'\nimport {areSetsEqual, getSymmetricDifference} from '../../../lib/lib'\nimport {applyResize, detectHoveredModule, getResizeCursor, getRotateAngle} from './funcs'\nimport Base from '../../../core/modules/base'\nimport {BoundingRect} from '../../../type'\nimport {UID} from '../../../core/type'\n\nexport default function handlePointerMove(this: Editor, e: PointerEvent) {\n  const {\n    action,\n    draggingModules,\n    viewport,\n    selectedShadow,\n    _selectingModules,\n  } = this\n  viewport.mouseMovePoint.x = e.clientX - viewport.rect!.x\n  viewport.mouseMovePoint.y = e.clientY - viewport.rect!.y\n  viewport.drawCrossLine = false\n  // hoveredModules.clear()\n\n  action.dispatch('world-mouse-move')\n\n  switch (this.manipulationStatus) {\n    case 'selecting': {\n      viewport.wrapper.setPointerCapture(e.pointerId)\n      const rect = generateBoundingRectFromTwoPoints(\n        viewport.mouseDownPoint,\n        viewport.mouseMovePoint,\n      )\n      const pointA = this.getWorldPointByViewportPoint(rect.x, rect.y)\n      const pointB = this.getWorldPointByViewportPoint(\n        rect.right,\n        rect.bottom,\n      )\n      const virtualSelectionRect: BoundingRect =\n        generateBoundingRectFromTwoPoints(pointA, pointB)\n      const _selecting: Set<UID> = new Set()\n      const modifyKey = e.ctrlKey || e.metaKey || e.shiftKey\n\n      this.moduleMap.forEach((module) => {\n        if (module.isInsideRect(virtualSelectionRect)) {\n          _selecting.add(module.id)\n        }\n      })\n\n      const selectingChanged = !areSetsEqual(_selectingModules, _selecting)\n\n      updateSelectionBox(viewport.selectionBox, rect)\n\n      /**\n       * Simple logic\n       * If with modifyKey\n       *    original-selected Symmetric Difference selecting\n       * else\n       *    original-selected merge selecting\n       */\n      if (!selectingChanged) return\n\n      this._selectingModules = _selecting\n\n      const SD = getSymmetricDifference(selectedShadow, _selecting)\n\n      if (modifyKey) {\n        action.dispatch('selection-modify', {\n          mode: 'replace',\n          idSet: SD,\n        })\n      } else {\n        if (_selecting.size === 0 && selectedShadow.size === 0) {\n          return action.dispatch('selection-clear')\n        }\n        const newSet = new Set([...selectedShadow, ..._selecting])\n\n        action.dispatch('selection-modify', {\n          mode: 'replace',\n          idSet: newSet,\n        })\n      }\n    }\n      break\n\n    case 'panning':\n      viewport.wrapper.setPointerCapture(e.pointerId)\n      updateCursor.call(this, 'grabbing')\n      action.dispatch('world-shift',\n        {\n          x: e.movementX,\n          y: e.movementY,\n        })\n\n      break\n\n    case 'dragging': {\n      viewport.wrapper.setPointerCapture(e.pointerId)\n      const x = (e.movementX * viewport.dpr) / viewport.scale\n      const y = (e.movementY * viewport.dpr) / viewport.scale\n\n      // force update\n      this.action.dispatch('module-modifying', {\n        type: 'move',\n        data: {x, y},\n      })\n    }\n      break\n\n    case 'resizing': {\n      viewport.wrapper.setPointerCapture(e.pointerId)\n      const {altKey, shiftKey} = e\n      // const {x, y} = this._rotatingOperator!.moduleOrigin\n      // const centerPoint = this.getViewPointByWorldPoint(x, y)\n      // const cursorDirection = getResizeDirection(centerPoint, viewport.mouseMovePoint)\n\n      const r = applyResize.call(this, altKey, shiftKey)\n      // console.log(r)\n      this.action.dispatch('module-modifying', {\n        type: 'resize',\n        data: r,\n      })\n    }\n      break\n\n    case 'rotating': {\n      viewport.wrapper.setPointerCapture(e.pointerId)\n      const {shiftKey} = e\n      const {x, y} = this._rotatingOperator!.moduleOrigin\n      const centerPoint = this.getViewPointByWorldPoint(x, y)\n      const rotation = Base.applyRotating.call(this, shiftKey)\n      const cursorAngle = getRotateAngle(centerPoint, viewport.mouseMovePoint)\n\n      updateCursor.call(this, 'rotate', viewport.mouseMovePoint, cursorAngle)\n\n      this.action.dispatch('module-modifying', {\n        type: 'rotate',\n        data: {rotation},\n      })\n    }\n      break\n\n    case 'waiting': {\n      console.log('mousedown')\n      const MOVE_THROTTLE = 1\n      const moved =\n        Math.abs(viewport.mouseMovePoint.x - viewport.mouseDownPoint.x) >\n        MOVE_THROTTLE ||\n        Math.abs(viewport.mouseMovePoint.y - viewport.mouseDownPoint.y) >\n        MOVE_THROTTLE\n\n      if (moved) {\n        if (draggingModules.size > 0) {\n          this.manipulationStatus = 'dragging'\n        } else {\n          this.manipulationStatus = 'selecting'\n        }\n      }\n    }\n      break\n\n    case 'static': {\n      const r = detectHoveredModule.call(this)\n      const {viewport} = this\n\n      if (r) {\n        if (r.type === 'rotate') {\n          const centerPoint = this.getViewPointByWorldPoint(r.moduleOrigin.x, r.moduleOrigin.y)\n          const angle = getRotateAngle(centerPoint, viewport.mouseMovePoint)\n\n          updateCursor.call(this, 'rotate', viewport.mouseMovePoint, angle)\n        } else if (r.type === 'resize') {\n          const {x, y} = r.moduleOrigin\n          const centerPoint = this.getViewPointByWorldPoint(x, y)\n          const cursorDirection = getResizeCursor(viewport.mouseMovePoint, centerPoint)\n\n          updateCursor.call(this, 'resize', cursorDirection)\n        }\n      } else {\n        updateCursor.call(this, 'default')\n      }\n\n      viewport.wrapper.releasePointerCapture(e.pointerId)\n      viewport.drawCrossLine = viewport.drawCrossLineDefault\n    }\n\n      break\n  }\n}\n","import Editor from '../../editor'\nimport {detectHoveredModule} from './funcs'\nimport {UID} from '../../../core/type'\n\nfunction handleContextMenu(this: Editor, e: MouseEvent) {\n  // const modifyKey = e.ctrlKey || e.metaKey || e.shiftKey\n\n  e.preventDefault()\n  e.stopPropagation()\n\n  /*\n  if  if (e.ctrlKey) {\n      return false\n    }\n  */\n\n  detectHoveredModule.call(this)\n  const lastId = this.hoveredModule\n  const selectedIdSet = this.getSelected\n  const position = {...this.viewport.mouseMovePoint}\n  let idSet = new Set<UID>()\n\n  // console.log(selectedIdSet,lastId)\n  if (lastId) {\n    if (selectedIdSet.has(lastId)) {\n      idSet = selectedIdSet\n    } else {\n      idSet.add(lastId)\n      this.addSelected(idSet)\n      console.log(this.selectedModules)\n      this.action.dispatch('selection-updated')\n    }\n  }\n\n  this.action.dispatch('context-menu', {\n    idSet,\n    position,\n    copiedItems: this.copiedItems.length > 0,\n  })\n\n  return false\n}\n\nexport default handleContextMenu\n","import {initViewportDom, InitViewportDomReturn} from './domManipulations'\nimport Editor from '../editor'\nimport {Viewport} from './type'\nimport {generateBoundingRectFromTwoPoints, throttle} from '../../core/utils'\nimport handleMouseDown from './eventHandlers/mouseDown'\nimport handleMouseUp from './eventHandlers/mouseUp'\nimport handleKeyDown from './eventHandlers/keyDown'\nimport handleKeyUp from './eventHandlers/keyUp'\nimport handleWheel from './eventHandlers/wheel'\nimport handlePointerMove from './eventHandlers/pointerMove'\nimport handleContextMenu from './eventHandlers/contextMenu'\nimport Rectangle from '../../core/modules/shapes/rectangle'\n\nexport function createViewport(this: Editor): Viewport {\n  const {\n    wrapper,\n    mainCanvas,\n    selectionCanvas,\n    selectionBox,\n    scrollBarX,\n    scrollBarY,\n    cursor,\n  }: InitViewportDomReturn = initViewportDom(this.id)\n  const selectionCTX = selectionCanvas.getContext(\n    '2d',\n  ) as CanvasRenderingContext2D\n  const mainCTX = mainCanvas.getContext('2d') as CanvasRenderingContext2D\n  const eventsController = new AbortController()\n  const resizeObserver = new ResizeObserver(\n    throttle(() => {\n      this.action.dispatch('world-resized')\n    }, 200),\n  )\n  const {signal} = eventsController\n  const mouseDownPoint = {x: 0, y: 0}\n  const mouseMovePoint = {x: 0, y: 0}\n  const rect = generateBoundingRectFromTwoPoints(\n    mouseDownPoint,\n    mouseMovePoint,\n  )\n  const viewportRect = generateBoundingRectFromTwoPoints(\n    mouseDownPoint,\n    mouseMovePoint,\n  )\n  const worldRect = generateBoundingRectFromTwoPoints(\n    mouseDownPoint,\n    mouseMovePoint,\n  )\n\n  wrapper.addEventListener('mousedown', handleMouseDown.bind(this), {\n    signal,\n    passive: false,\n  })\n  wrapper.addEventListener('mouseup', handleMouseUp.bind(this), {signal})\n  window.addEventListener('keydown', handleKeyDown.bind(this), {signal})\n  window.addEventListener('keyup', handleKeyUp.bind(this), {signal})\n  window.addEventListener('wheel', handleWheel.bind(this), {\n    signal,\n    passive: false,\n  })\n  wrapper.addEventListener('pointermove', handlePointerMove.bind(this), {\n    signal,\n  })\n  wrapper.addEventListener('contextmenu', handleContextMenu.bind(this), {\n    signal,\n  })\n\n  return {\n    drawCrossLine: false,\n    drawCrossLineDefault: false,\n    enableCrossLine: false,\n    // handlingModules: undefined,\n    // hoveredModules: undefined,\n    initialized: false,\n    // manipulationStatus: undefined,\n    scale: 1,\n    spaceKeyDown: false,\n    zooming: false,\n    dpr: this.config.dpr,\n    frame: new Rectangle({...this.config.frame}),\n    offset: {x: 0, y: 0},\n    viewportRect,\n    worldRect,\n    mouseDownPoint,\n    mouseMovePoint,\n    rect,\n    wrapper,\n    mainCanvas,\n    selectionCanvas,\n    selectionCTX,\n    mainCTX,\n    scrollBarX,\n    scrollBarY,\n    selectionBox,\n    cursor,\n    resizeObserver,\n    eventsController,\n  }\n}\n","import Editor from '../editor'\n\nexport function destroyViewport(this: Editor) {\n  if (!this.viewport) return\n\n  this.viewport.resizeObserver.disconnect()\n  this.viewport.eventsController.abort()\n  this.viewport.wrapper.style.width = '100%'\n  this.viewport.wrapper.style.height = '100%'\n  this.viewport.wrapper.remove()\n  // @ts-ignore\n  this.viewport = null\n}","export type TransformType = [\n  horizontalScaling: number,\n  verticalSkewing: number,\n  horizontalSkewing: number,\n  verticalScaling: number,\n  horizontalTranslation: number,\n  verticalTranslation: number\n]\n\nconst resetCanvas = (ctx: CanvasRenderingContext2D, scale: number, offset: { x: number, y: number },\n) => {\n  const transform: TransformType = [\n    scale, 0, 0, scale, offset.x, offset.y,\n  ]\n  ctx.setTransform(1, 0, 0, 1, 0, 0)\n  ctx.clearRect(\n    0,\n    0,\n    ctx.canvas.width * 2,\n    ctx.canvas.height * 2,\n  )\n\n  ctx.setTransform(...transform)\n}\n\nexport default resetCanvas","import {ModuleProps} from '../../core/modules/type'\nimport {UID} from '../../core/type'\n\nconst extractIdSetFromArray = (from: ModuleProps[]): Set<UID> => {\n  return new Set(from.map(item => item.id))\n}\n\nconst arrayToMap = (from: ModuleProps[]): Map<UID, ModuleProps> => {\n  return new Map(from.map(item => [item.id, item]))\n}\n\nexport {extractIdSetFromArray, arrayToMap}","import {extractIdSetFromArray} from './helpers'\nimport {HistoryNode} from './DoublyLinkedList'\nimport Editor from '../editor'\nimport {ModuleProps} from '../../core/modules/type'\n\nexport function redo(this: Editor, quiet: boolean = false): HistoryNode | false {\n  if (this.history.current === this.history.tail) return false\n\n  this.history.forward()\n\n  const {type, payload} = this.history.current!.data\n  const {selectedModules} = payload\n\n  switch (type) {\n    case 'history-init':\n      break\n    case 'history-add':\n    case 'history-paste':\n    case 'history-duplicate':\n\n      // delete modules from added\n      this.batchAdd(this.batchCreate(payload.modules))\n\n      break\n\n    case 'history-modify':\n      payload.changes.map(({id, props}) => {\n        const redoProps: Partial<ModuleProps> = {}\n\n        Object.keys(props).forEach((propName) => {\n          redoProps[propName] = props[propName]['to']\n          this.batchModify(new Set([id]), redoProps)\n        })\n      })\n      break\n\n    case 'history-move':\n      this.batchMove(payload.selectedModules, {\n        x: payload.delta.x,\n        y: payload.delta.y,\n      })\n      break\n\n    case 'history-reorder':\n      break\n    case 'history-group':\n      break\n    case 'history-ungroup':\n      break\n    case 'history-composite':\n      break\n\n    case 'history-delete':\n      this.batchDelete(extractIdSetFromArray(payload.modules))\n\n      break\n  }\n\n  // this.editor.updateVisibleModuleMap(this.editor.viewport.worldRect)\n\n  if (!quiet) {\n    this.replaceSelected(selectedModules)\n    // console.log(selectedModules)\n    this.action.dispatch('selection-updated')\n\n  }\n\n  return this.history.current as HistoryNode\n}\n","import {HistoryModules} from './type'\nimport {extractIdSetFromArray} from './helpers'\nimport {HistoryNode} from './DoublyLinkedList'\nimport Editor from '../editor'\nimport {ModuleProps} from '../../core/modules/type'\n\nexport function undo(this: Editor, quiet: boolean = false): HistoryNode | false {\n  if (this.history.current === this.history.head) return false\n\n  const {type, payload} = this.history.current!.data\n\n  // const {selectedModules} = payload\n  let modules: HistoryModules | null = null\n\n  switch (type) {\n    case 'history-init':\n      break\n    case 'history-add':\n    case 'history-paste':\n    case 'history-duplicate':\n\n      // delete modules from added\n      this.batchDelete(extractIdSetFromArray(payload.modules))\n\n      break\n\n    case 'history-modify':\n      payload.changes.map(({id, props}) => {\n        const undoProps: Partial<ModuleProps> = {}\n\n        Object.keys(props).forEach(propName => {\n          // console.log(props[propName]!['from'])\n          undoProps[propName] = props[propName]!['from']\n          this.batchModify(new Set([id]), undoProps)\n        })\n      })\n      break\n\n    case 'history-move':\n      this.batchMove(payload.selectedModules, {\n        x: -payload.delta.x,\n        y: -payload.delta.y,\n      })\n      break\n\n    case 'history-reorder':\n      break\n    case 'history-group':\n      break\n    case 'history-ungroup':\n      break\n    case 'history-composite':\n      break\n\n    case 'history-delete':\n      modules = payload.modules\n\n      this.batchAdd(this.batchCreate(modules as ModuleProps[]))\n\n      break\n  }\n\n  this.history.back()\n  // this.editor.updateVisibleModuleMap(this.editor.viewport.worldRect)\n  if (!quiet) {\n    const backedNodeSelectedModules = this.history.current!.data.payload.selectedModules\n\n    this.replaceSelected(backedNodeSelectedModules)\n    this.action.dispatch('selection-updated')\n\n   }\n\n  return this.history.current as HistoryNode\n}","import {HistoryNode} from './DoublyLinkedList'\nimport Editor from '../editor'\nimport {redo} from './redo'\nimport {undo} from './undo'\n\nexport function pick(this: Editor, targetNode: HistoryNode) {\n\n  const relativePosition = this.history.compareToCurrentPosition(targetNode)\n\n  if (!relativePosition || relativePosition === 'equal') return\n\n  if (relativePosition === 'front' || relativePosition === 'behind') {\n    const quietMode = true\n    let localCurrent\n\n    while (true) {\n      if (relativePosition === 'front') {\n        localCurrent = undo.call(this, quietMode) as HistoryNode\n      } else if (relativePosition === 'behind') {\n        localCurrent = redo.call(this, quietMode) as HistoryNode\n      }\n\n      if (localCurrent === targetNode) break\n    }\n\n    const {selectedModules} = targetNode.data.payload\n\n    // this.editor.updateVisibleModuleMap(this.editor.viewport.worldRect)\n\n    this.replaceSelected(selectedModules)\n\n\n   } else {\n    // do sth...\n  }\n}","import Rectangle from '../../core/modules/shapes/rectangle'\nimport Editor from '../editor'\nimport {ModuleInstance} from '../../core/modules/type'\nimport {UID} from '../../core/type'\nimport {Point, Rect} from '../../type'\n\ntype FrameType = 'A4' | 'A4L' | 'photo1'\n\nexport const createFrame = (p: FrameType, id: UID): ModuleInstance => {\n  let width: number = 0\n  let height: number = 0\n  let x: number = 0\n  let y: number = 0\n\n  if (p === 'A4' || p === 'A4L') {\n    const RATIO = 1.414142857\n\n    if (p === 'A4L') {\n      // A4 landscape\n      height = 1000\n      width = RATIO * height\n    } else {\n      width = 1000\n      height = RATIO * width\n    }\n  } else if (p === 'photo1') {\n    width = 35\n    height = 55\n  } else if (p === 'bigSquare') {\n    width = 500\n    height = 500\n  }\n\n  x = width / 2\n  y = height / 2\n\n  return new Rectangle({\n    id,\n    x,\n    y,\n    width,\n    height,\n    opacity: 100,\n    lineWidth: 1,\n    lineColor: '#000000',\n    fillColor: '#fff',\n    layer: -1,\n  })\n}\n\n/*\n* Fit a world coordinate based rect into pixel-based viewport\n* which can set the rect middle of the viewport\n* paddingScale can leave some space between the frame and the viewport boundary\n* */\nexport const fitRectToViewport = (rect: Rect, viewport: Rect, paddingScale = 0.02): {\n  scale: number\n  offsetX: number\n  offsetY: number\n} => {\n  const {width: viewWidth, height: viewHeight} = viewport\n  const {width: rectWidth, height: rectHeight} = rect\n  const scaleX = viewWidth / rectWidth\n  const scaleY = viewHeight / rectHeight\n  const scale = Math.min(scaleX, scaleY) - Math.min(scaleX, scaleY) * paddingScale\n  const scaledRectWidth = rect.width * scale\n  const scaledRectHeight = rect.height * scale\n  const scaledRectX = rect.x * scale\n  const scaledRectY = rect.y * scale\n\n  const offsetX = (viewWidth - scaledRectWidth) / 2 - scaledRectX\n  const offsetY = (viewHeight - scaledRectHeight) / 2 - scaledRectY\n\n  return {\n    scale,\n    offsetX,\n    offsetY,\n  }\n}\n\nexport function zoomAtPoint(\n  this: Editor,\n  atPoint: Point,\n  newScale: number,\n):\n  {\n    x: number;\n    y: number;\n  } {\n  const {dpr, scale, rect, offset, viewportRect} = this.viewport\n  const pixelOffsetX = (atPoint.x - rect.width / 2) * dpr\n  const pixelOffsetY = (atPoint.y - rect.height / 2) * dpr\n  const centerAreaThresholdX = rect.width / 8\n  const centerAreaThresholdY = rect.height / 8\n  const scaleFactor = newScale / scale\n  const idx = newScale < scale ? -0.2 : 0.2\n\n  if (scaleFactor === 0) {\n    return offset\n  }\n\n  const centerX = viewportRect.cx\n  const centerY = viewportRect.cy\n  let newOffsetX = centerX - (centerX - offset.x) * scaleFactor\n  let newOffsetY = centerY - (centerY - offset.y) * scaleFactor\n\n  if (Math.abs(pixelOffsetX) > centerAreaThresholdX) {\n    newOffsetX = newOffsetX - pixelOffsetX * scaleFactor * idx\n  }\n\n  if (Math.abs(pixelOffsetY) > centerAreaThresholdY) {\n    newOffsetY = newOffsetY - pixelOffsetY * scaleFactor * idx\n  }\n\n  return {\n    x: newOffsetX,\n    y: newOffsetY,\n  }\n}","import resetCanvas from './viewport/resetCanvas'\nimport {HistoryModuleChangeItem, ModuleModifyData, SelectionModifyData} from './actions/type'\nimport Editor from './editor'\nimport {redo} from './history/redo'\nimport {undo} from './history/undo'\nimport {pick} from './history/pick'\nimport {HistoryOperation} from './history/type'\n// import {updateSelectionCanvasRenderData} from './selection/helper'\n// import zoom from '../../components/statusBar/zoom'\nimport {fitRectToViewport} from './viewport/helper'\nimport {ModuleMap, ModuleProps} from '../core/modules/type'\nimport {Point} from '../type'\n\nexport function initEditor(this: Editor) {\n  const {container, viewport, action} = this\n  const dispatch = action.dispatch.bind(action)\n  const on = action.on.bind(action)\n\n  container.appendChild(viewport.wrapper)\n\n  viewport.resizeObserver.observe(container)\n\n  on('world-resized', () => {\n    this.updateViewport()\n\n    if (!this.initialized) {\n      this.initialized = true\n      dispatch('world-zoom', 'fit')\n      dispatch('module-updated')\n      this.events.onInitialized?.()\n      this.events.onHistoryUpdated?.(this.history)\n      this.events.onModulesUpdated?.(this.moduleMap)\n    } else {\n      dispatch('world-updated')\n    }\n  })\n\n  on('world-updated', () => {\n    this.updateWorldRect()\n    // console.log(this.viewport.scale, this.viewport.offset, this.viewport.worldRect)\n    this.events.onViewportUpdated?.({\n      width: this.viewport.viewportRect.width,\n      height: this.viewport.viewportRect.height,\n      scale: this.viewport.scale,\n      offsetX: this.viewport.offset.x,\n      offsetY: this.viewport.offset.y,\n      status: this.manipulationStatus,\n    })\n    dispatch('visible-module-updated')\n  })\n\n  on('world-zoom', (arg) => {\n    if (arg === 'fit') {\n      const {frame, viewportRect} = this.viewport\n      const frameRect = frame.getBoundingRect()\n      const {scale, offsetX, offsetY} = fitRectToViewport(frameRect, viewportRect, 0.02)\n\n      this.viewport.scale = scale\n      this.viewport.offset.x = offsetX\n      this.viewport.offset.y = offsetY\n\n      dispatch('world-updated')\n    } else {\n      const {scale, dpr} = this.viewport\n      let result = null\n      let newScale = 1\n      const minScale = 0.01 * dpr\n      const maxScale = 500 * dpr\n      let point = arg.physicalPoint\n\n      if (arg.zoomTo) {\n        newScale = arg.zoomFactor\n      } else if (arg.zoomBy) {\n        newScale = scale + arg.zoomFactor\n      }\n\n      // clamp\n      newScale = Math.max(minScale, Math.min(newScale, maxScale))\n      result = this.zoom(newScale, point)\n// return\n      // console.log(newScale)\n\n      this.viewport.scale = newScale\n      this.viewport.offset.x = result.x!\n      this.viewport.offset.y = result.y!\n      dispatch('world-updated')\n    }\n  })\n\n  on('world-shift', (data) => {\n    const {x, y} = data\n    // console.log(x, y)\n    const {dpr} = this.viewport\n    this.viewport.offset.x += x * dpr\n    this.viewport.offset.y += y * dpr\n    dispatch('world-updated')\n  })\n\n  on('visible-module-updated', () => {\n    this.updateVisibleModuleMap()\n    // this.updateSnapPoints()\n    dispatch('render-modules')\n    dispatch('visible-selection-updated')\n  })\n\n  on('visible-selection-updated', () => {\n    this.updateVisibleSelected()\n    dispatch('render-selection')\n  })\n\n  on('selection-all', () => {\n    this.selectAll()\n    dispatch('selection-updated')\n  })\n\n  on('selection-clear', () => {\n    this.selectedModules.clear()\n    dispatch('selection-updated')\n  })\n\n  on('selection-modify', (data) => {\n    const {mode, idSet} = data as SelectionModifyData\n\n    this.modifySelected(idSet, mode)\n    dispatch('selection-updated')\n  })\n\n  on('module-updated', (historyData: HistoryOperation) => {\n    dispatch('visible-module-updated')\n    dispatch('selection-updated')\n\n    if (historyData) {\n      this.history.add(historyData)\n      this.events.onHistoryUpdated?.(this.history)\n    }\n  })\n\n  on('selection-updated', () => {\n    this.hoveredModule = null\n    // console.log(this.selectedModules)\n    // updateSelectionCanvasRenderData.call(this)\n    this.events.onSelectionUpdated?.(this.selectedModules, this.getSelectedPropsIfUnique)\n\n    dispatch('visible-selection-updated')\n  })\n\n  on('world-mouse-move', () => {\n    const p = this.getWorldPointByViewportPoint(\n      this.viewport.mouseMovePoint.x,\n      this.viewport.mouseMovePoint.y,\n    )\n    this.events.onWorldMouseMove?.(p as Point)\n  })\n\n  on('module-delete', () => {\n    const savedSelected = this.getSelected\n    const backup = this.batchDelete(savedSelected)\n\n    this.selectedModules.clear()\n\n    dispatch('module-updated', {\n      type: 'history-delete',\n      payload: {\n        modules: backup,\n        selectedModules: savedSelected,\n      },\n    })\n  })\n\n  on('module-copy', () => {\n    this.copiedItems = this.batchCopy(this.getSelected, false)\n    this.updateCopiedItemsDelta()\n    this.events.onModuleCopied?.(this.copiedItems)\n  })\n\n  on('module-paste', (position?) => {\n    if (this.copiedItems.length === 0) return\n\n    let newModules: ModuleMap\n\n    if (position) {\n      const {x, y} = this.getWorldPointByViewportPoint(position.x, position.y)\n      const topLeftItem = this.copiedItems.reduce((prev, current) => {\n        return (current.x < prev.x && current.y < prev.y) ? current : prev\n      })\n      const offsetX = x - topLeftItem.x\n      const offsetY = y - topLeftItem.y\n\n      const offsetItems = this.copiedItems.map((item) => {\n        return {\n          ...item,\n          x: item.x + offsetX,\n          y: item.y + offsetY,\n        }\n      })\n\n      newModules = this.batchCreate(offsetItems)\n    } else {\n      newModules = this.batchCreate(this.copiedItems)\n    }\n\n    const savedSelected = new Set(newModules.keys())\n\n    this.batchAdd(newModules)\n    this.replaceSelected(savedSelected)\n    this.updateCopiedItemsDelta()\n\n    dispatch('module-updated', {\n      type: 'history-paste',\n      payload: {\n        modules: [...newModules.values()].map((mod) => mod.getDetails()),\n        selectedModules: savedSelected,\n      },\n    })\n  })\n\n  on('module-duplicate', () => {\n    if (this.selectedModules.size === 0) return\n\n    const temp: ModuleProps[] = this.batchCopy(this.selectedModules, false)\n\n    temp.forEach((copiedItem) => {\n      copiedItem!.x += this.CopyDeltaX\n      copiedItem!.y += this.CopyDeltaY\n    })\n\n    const newModules = this.batchCreate(temp)\n    const savedSelected = new Set(newModules.keys())\n\n    this.batchAdd(newModules)\n    this.replaceSelected(savedSelected)\n\n    const moduleProps = [...newModules.values()].map((mod) => mod.getDetails())\n\n    dispatch('module-updated', {\n      type: 'history-duplicate',\n      payload: {\n        modules: moduleProps,\n        selectedModules: savedSelected,\n      },\n    })\n  })\n\n  on('module-layer', (data) => {\n    console.log(data)\n    /* const s = this.getSelected\n\n     if (s.size === 0) return\n     const changes: ModuleModifyData[] = []\n\n     s.forEach((id) => {\n       const module = this.moduleMap.get(id)\n       if (module) {\n         changes.push({\n           id,\n           props: {\n             x: module.x + delta.x,\n             y: module.y + delta.y,\n           },\n         })\n       }\n     })*/\n\n    // this.batchMove(s, delta)\n    // dispatch('module-modify', changes)\n  })\n\n  on('module-move', ({delta = {x: 0, y: 0}}) => {\n    const s = this.getSelected\n\n    if (s.size === 0) return\n    const changes: ModuleModifyData[] = []\n\n    s.forEach((id) => {\n      const module = this.moduleMap.get(id)\n      if (module) {\n        changes.push({\n          id,\n          props: {\n            x: module.x + delta.x,\n            y: module.y + delta.y,\n          },\n        })\n      }\n    })\n\n    // this.batchMove(s, delta)\n    dispatch('module-modify', changes)\n  })\n\n  on('module-add', (data) => {\n    const newModules = this.batchAdd(this.batchCreate(data))\n    const savedSelected = new Set(newModules.keys())\n\n    this.batchAdd(newModules)\n    this.replaceSelected(savedSelected)\n\n    const moduleProps = [...newModules.values()].map((mod) => mod.getDetails())\n\n    dispatch('module-updated', {\n      type: 'history-add',\n      payload: {\n        modules: moduleProps,\n        selectedModules: savedSelected,\n      },\n    })\n  })\n\n  on('module-modifying', ({type, data}) => {\n    const s = this.getSelected\n\n    if (s.size === 0) return\n\n    if (type === 'move') {\n      this.batchMove(s, data as Point)\n    } else if (type === 'resize' || type === 'rotate') {\n      this.batchModify(s, data)\n    }\n\n    dispatch('module-updated')\n  })\n\n  on('module-modify', (data) => {\n    const changes: HistoryModuleChangeItem[] = []\n    // console.log(data)\n\n    data.map(({id, props: kv}) => {\n      const props = {}\n      const change = {id, props}\n      const module = this.moduleMap.get(id)\n\n      if (!module) return\n\n      Object.keys(kv).map((keyName) => {\n        const fromValue = module[keyName]\n        const toValue = kv[keyName]\n        // console.log(fromValue, toValue)\n        return props[keyName] = {\n          from: fromValue,\n          to: toValue,\n        }\n      })\n      this.batchModify(new Set([id]), kv)\n      changes.push(change)\n    })\n\n    this.history.add({\n      type: 'history-modify',\n      payload: {\n        selectedModules: this.getSelected,\n        changes,\n      },\n    })\n\n    this.events.onHistoryUpdated?.(this.history)\n    this.events.onModulesUpdated?.(this.moduleMap)\n\n    dispatch('module-updated')\n  })\n\n  on('render-modules', () => {\n    resetCanvas(\n      this.viewport.mainCTX,\n      this.viewport.scale,\n      this.viewport.offset,\n    )\n\n    this.renderModules()\n  })\n\n  on('render-selection', () => {\n    resetCanvas(\n      this.viewport.selectionCTX,\n      this.viewport.scale,\n      this.viewport.offset,\n    )\n    this.renderSelections()\n  })\n\n  on('module-hover-enter', (id) => {\n    if (this.hoveredModule && id && this.hoveredModule === id) {\n      return\n    }\n\n    // console.log(this.hoveredModule, id)\n\n    this.hoveredModule = id\n    dispatch('visible-selection-updated')\n  })\n\n  on('module-hover-leave', () => {\n    this.hoveredModule = null\n    dispatch('visible-selection-updated')\n  })\n\n  on('history-undo', () => {\n    undo.call(this)\n    dispatch('module-updated')\n    this.events.onHistoryUpdated?.(this.history)\n  })\n\n  on('history-redo', () => {\n    redo.call(this)\n    dispatch('module-updated')\n    this.events.onHistoryUpdated?.(this.history)\n  })\n\n  on('history-pick', (data) => {\n    pick.call(this, data)\n    dispatch('module-updated')\n    this.events.onHistoryUpdated?.(this.history)\n  })\n\n  on('context-menu', ({position}) => {\n    this.events.onContextMenu?.(position)\n  })\n}\n","import {EditorExportFileType, EventHandlers} from './type'\nimport History from './history/history'\nimport Action from './actions/actions'\nimport {generateBoundingRectFromTwoPoints, rectsOverlap} from '../core/utils'\nimport {batchAdd, batchCopy, batchCreate, batchDelete, batchModify, batchMove} from './modules/moduleModify'\nimport {OperationHandlers, ResizeHandler, SelectionActionMode} from './selection/type'\nimport {modifySelected} from './selection/helper'\nimport {updateScrollBars} from './viewport/domManipulations'\nimport selectionRender from './viewport/selectionRender'\nimport {screenToWorld, worldToScreen} from '../lib/lib'\nimport {Viewport, ViewportManipulationType} from './viewport/type'\nimport {createViewport} from './viewport/createViewport'\nimport {destroyViewport} from './viewport/destroyViewport'\nimport {initEditor} from './initEditor'\nimport {EditorEventType} from './actions/type'\nimport {zoomAtPoint} from './viewport/helper'\nimport {RectangleProps} from '../core/modules/shapes/rectangle'\nimport {ModuleInstance, ModuleMap, ModuleProps} from '../core/modules/type'\nimport {UID} from '../core/type'\nimport {BoundingRect, Point} from '../type'\n\nexport interface EditorDataProps {\n  id: UID;\n  modules: ModuleProps[];\n}\n\nexport interface EditorConfig {\n  moduleIdCounter: number\n  dpr: number;\n  frame: RectangleProps;\n  offset: { x: number, y: number };\n  scale: number\n}\n\nexport interface EditorInterface {\n  container: HTMLDivElement\n  data: EditorDataProps\n  events?: EventHandlers;\n  config: EditorConfig;\n}\n\nclass Editor {\n  readonly id: UID\n  config: EditorConfig\n  private moduleCounter = 0\n  readonly moduleMap: ModuleMap\n  // private readonly snapPoints: SnapPointData[] = []\n  private readonly visibleModuleMap: ModuleMap\n  readonly action: Action\n  readonly container: HTMLDivElement\n  events: EventHandlers = {}\n  history: History\n  viewport: Viewport\n  readonly selectedModules: Set<UID> = new Set()\n  readonly visibleSelected: Set<UID> = new Set()\n  readonly operationHandlers: OperationHandlers[] = []\n\n  // resizeHandleSize: number = 10\n  copiedItems: ModuleProps[] = []\n  hoveredModule: UID | null = null\n  // highlightedModules: Set<UID> = new Set()\n  draggingModules: Set<UID> = new Set()\n  _selectingModules: Set<UID> = new Set()\n  _deselection: UID | null = null\n  _resizingOperator: ResizeHandler | null = null\n  _rotatingOperator: OperationHandlers | null = null\n  selectedShadow: Set<UID> = new Set()\n  manipulationStatus: ViewportManipulationType = 'static'\n  CopyDeltaX = 50\n  CopyDeltaY = 100\n  initialized: boolean = false\n\n  constructor({\n                container,\n                data,\n                events = {},\n                config,\n              }: EditorInterface) {\n    this.visibleModuleMap = new Map()\n    this.id = data.id\n    this.config = config\n    this.events = events\n    this.action = new Action()\n    this.container = container\n    this.history = new History(this)\n    this.viewport = createViewport.call(this)\n    this.moduleMap = new Map()\n    this.moduleCounter = config.moduleIdCounter\n    const modules: ModuleMap = this.batchCreate(data.modules)\n    modules.forEach((module) => {\n      this.moduleMap.set(module.id, module)\n    })\n\n    this.init()\n  }\n\n  private init() {\n    initEditor.call(this)\n  }\n\n  get createModuleId(): UID {\n    return this.id + '-' + ++this.moduleCounter\n  }\n\n  batchCreate(moduleDataList: ModuleProps[]): ModuleMap {\n    return batchCreate.call(this, moduleDataList)\n  }\n\n  batchAdd(modules: ModuleMap): ModuleMap {\n    return batchAdd.call(this, modules)\n  }\n\n  batchCopy(\n    from: Set<UID>,\n    includeIdentifiers = true,\n  ): ModuleProps[] {\n    return batchCopy.call(this, from, includeIdentifiers) as ModuleProps[]\n  }\n\n  batchDelete(from: Set<UID>): ModuleProps[] {\n    return batchDelete.call(this, from)\n  }\n\n  batchMove(from: Set<UID>, delta: Point) {\n    batchMove.call(this, from, delta)\n  }\n\n  batchModify(\n    idSet: Set<UID>,\n    data: Partial<ModuleProps>,\n  ) {\n    batchModify.call(this, idSet, data)\n  }\n\n  // getModulesByLayerIndex() {}\n\n  getModulesByIdSet(idSet: Set<UID>): ModuleMap {\n    const result: ModuleMap = new Map()\n\n    idSet.forEach((id) => {\n      const mod = this.moduleMap.get(id)\n      if (mod) {\n        result.set(id, mod)\n      }\n    })\n\n    return result\n  }\n\n  getModuleList(): ModuleInstance[] {\n    return [...Object.values(this.moduleMap)]\n  }\n\n  updateVisibleModuleMap() {\n    this.visibleModuleMap.clear()\n\n    // console.log(this.viewport.offset, this.viewport.worldRect)\n    // Create an array from the Map, sort by the 'layer' property, and then add them to visibleModuleMap\n    const sortedModules = ([...this.moduleMap.values()] as ModuleInstance[])\n      .filter(module => {\n        const boundingRect = module.getBoundingRect() as BoundingRect\n        return rectsOverlap(boundingRect, this.viewport.worldRect)\n      })\n      .sort((a, b) => a.layer - b.layer)\n\n    sortedModules.forEach(module => {\n      this.visibleModuleMap.set(module.id, module)\n    })\n  }\n\n  /*updateSnapPoints() {\n    this.snapPoints.length = 0\n    this.visibleModuleMap.forEach(module => {\n      this.snapPoints.push(...module.getSnapPoints())\n    })\n  }*/\n\n  updateVisibleSelected() {\n    this.visibleSelected.clear()\n    this.operationHandlers.length = 0\n\n    this.getVisibleModuleMap.forEach((module) => {\n      if (this.selectedModules.has(module.id)) {\n        this.visibleSelected.add(module.id)\n      }\n    })\n\n    const moduleProps = this.getSelectedPropsIfUnique\n\n    if (moduleProps) {\n      const module = this.moduleMap.get(moduleProps.id)\n      const {scale, dpr} = this.viewport\n      const lineWidth = 1 / scale * dpr\n      const resizeSize = 10 / scale * dpr\n      const rotateSize = 15 / scale * dpr\n      const lineColor = '#5491f8'\n\n      const operators = module!.getOperators({\n        size: resizeSize,\n        lineColor,\n        lineWidth,\n        fillColor: '#fff',\n      }, {\n        size: rotateSize,\n        lineColor: 'transparent',\n        lineWidth: 0,\n        fillColor: 'transparent',\n      })\n\n      this.operationHandlers.push(...operators)\n    }\n  }\n\n  public get getVisibleModuleMap(): ModuleMap {\n    return new Map(this.visibleModuleMap)\n  }\n\n  public get getVisibleSelected() {\n    return new Set(this.visibleSelected)\n  }\n\n  public get getVisibleSelectedModuleMap() {\n    return this.getModulesByIdSet(this.getVisibleSelected)\n  }\n\n  public get getSelected(): Set<UID> {\n    return new Set(this.selectedModules)\n  }\n\n  public get getMaxLayerIndex(): number {\n    let max = 0\n    this.moduleMap.forEach((mod) => {\n      // console.log(mod.layer)\n      if (mod.layer > max) {\n        max = mod.layer\n      }\n    })\n\n    return max\n  }\n\n  public modifySelected(idSet: Set<UID>, action: SelectionActionMode) {\n    modifySelected.call(this, idSet, action)\n  }\n\n  public addSelected(idSet: Set<UID>) {\n    modifySelected.call(this, idSet, 'add')\n  }\n\n  public deleteSelected(idSet: Set<UID>) {\n    modifySelected.call(this, idSet, 'delete')\n  }\n\n  public toggleSelected(idSet: Set<UID>) {\n    modifySelected.call(this, idSet, 'toggle')\n  }\n\n  public replaceSelected(idSet: Set<UID>) {\n    modifySelected.call(this, idSet, 'replace')\n  }\n\n  public selectAll(): void {\n    this.selectedModules.clear()\n    this.moduleMap.forEach((module) => {\n      this.selectedModules.add(module.id)\n    })\n\n    // this.events.onSelectionUpdated?.(this.selectedModules)\n  }\n\n  updateCopiedItemsDelta(): void {\n    this.copiedItems.forEach((copiedItem) => {\n      copiedItem!.x += this.CopyDeltaX\n      copiedItem!.y += this.CopyDeltaY\n    })\n  }\n\n  public get getSelectedPropsIfUnique(): ModuleProps | null {\n    if (this.selectedModules.size === 1) {\n      const unique = [...this.selectedModules.values()][0]\n      const module = this.moduleMap.get(unique)\n\n      if (module) {\n        return module.getDetails()\n      }\n\n      return null\n    }\n    return null\n  }\n\n  public execute(type: EditorEventType, data: unknown = null) {\n    // @ts-ignore\n    this.action.execute(type, data)\n  }\n\n  // viewport\n  renderModules() {\n    // console.log('renderModules')\n    const animate = () => {\n      const {frame, mainCTX: ctx} = this.viewport\n\n      frame.render(ctx)\n\n      // deduplicateObjectsByKeyValue()\n      // console.log(this.visibleModuleMap.size)\n      // deduplicateObjectsByKeyValue\n\n      this.visibleModuleMap.forEach((module) => {\n          module.render(ctx)\n        },\n      )\n    }\n\n    requestAnimationFrame(animate)\n  }\n\n  /*  public get getModulesInsideOfFrame(): ModuleInstance[] {\n      const arr = []\n      this.moduleMap.forEach((module) => {\n\n      })\n    }*/\n\n  public printOut(ctx: CanvasRenderingContext2D): void {\n    this.moduleMap.forEach((module) => {\n      module.render(ctx)\n    })\n  }\n\n  public exportToFiles(): EditorExportFileType {\n    const {dpr, scale, offset, frame} = this.viewport\n\n    const result: EditorExportFileType = {\n      id: this.id,\n      config: {\n        moduleIdCounter: this.moduleCounter,\n        dpr,\n        scale,\n        offset,\n        frame: frame.getDetails(),\n      },\n      data: [],\n    }\n\n    this.moduleMap.forEach((module) => {\n      result.data.push(module.getDetails())\n    })\n\n    return result\n  }\n\n  renderSelections() {\n    // console.log('renderSelections')\n\n    const animate = () => {\n      selectionRender.call(this)\n    }\n\n    requestAnimationFrame(animate)\n  }\n\n  updateWorldRect() {\n    const {dpr} = this.viewport\n    const {width, height} = this.viewport.viewportRect\n    const p1 = this.getWorldPointByViewportPoint(0, 0)\n    const p2 = this.getWorldPointByViewportPoint(width / dpr, height / dpr)\n\n    this.viewport.worldRect = generateBoundingRectFromTwoPoints(p1, p2)\n    // console.log('worldRect', this.viewport.worldRect)\n  }\n\n  zoom(zoom: number, point?: Point): { x: number, y: number } {\n    const {rect} = this.viewport\n\n    point = point || {x: rect.width / 2, y: rect.height / 2}\n\n    return zoomAtPoint.call(this, point, zoom)\n  }\n\n  updateScrollBar() {\n    const {scrollBarX, scrollBarY} = this.viewport\n\n    updateScrollBars(scrollBarX, scrollBarY)\n  }\n\n  updateViewport() {\n    const {dpr, mainCanvas, selectionCanvas} = this.viewport\n    const rect = this.container.getBoundingClientRect().toJSON()\n    const {x, y, width, height} = rect\n    const viewportWidth = width * dpr\n    const viewportHeight = height * dpr\n\n    this.viewport.rect = {...rect, cx: x + width / 2, cy: y + height / 2}\n    this.viewport.viewportRect = generateBoundingRectFromTwoPoints(\n      {x: 0, y: 0},\n      {x: viewportWidth, y: viewportHeight},\n    )\n\n    mainCanvas.width = selectionCanvas.width = viewportWidth\n    mainCanvas.height = selectionCanvas.height = viewportHeight\n  }\n\n  getWorldPointByViewportPoint(x: number, y: number) {\n    const {dpr, offset, scale} = this.viewport\n\n    return screenToWorld(\n      {x, y},\n      offset,\n      scale,\n      dpr,\n    )\n  }\n\n  getViewPointByWorldPoint(x: number, y: number) {\n    const {dpr, offset, scale} = this.viewport\n\n    return worldToScreen(\n      {x, y},\n      offset,\n      scale,\n      dpr,\n    )\n  }\n\n  //eslint-disable-block\n  destroy() {\n    destroyViewport.call(this)\n    this.action.destroy()\n    this.history.destroy()\n    this.moduleMap.clear()\n  }\n}\n\nexport default Editor\n","import Editor from './main/editor'\n\nexport default Editor"],"mappings":"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","names":["lineWidth","x","y","viewport"]}