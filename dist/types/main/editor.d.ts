import { EditorConfig, EditorExportFileType, EventHandlers } from './type';
import History from '~/services/history/history';
import Action from '~/services/actions/actions';
import AssetsManager from '~/services/assets/AssetsManager';
import { ElementProps } from '~/elements/elements';
import ToolManager from '~/services/tools/toolManager';
import { BoundingRect, VisionEditorAssetType, VisionEventType } from '~/type';
import ElementManager from '~/services/element/ElementManager';
import SelectionManager from '~/services/selection/SelectionManager';
import Cursor from '~/services/cursor/cursor';
import World from '~/services/world/World';
import ClipboardManager from '~/services/clipboard/Clipboard';
import InteractionState from '~/services/interaction/InteractionState';
import VisibleManager from '~/services/visible/VisibleManager';
declare class Editor {
    id: string;
    readonly container: HTMLDivElement;
    config: EditorConfig;
    events: EventHandlers;
    resizeObserver: ResizeObserver;
    world: World;
    action: Action;
    visible: VisibleManager;
    interaction: InteractionState;
    clipboard: ClipboardManager;
    cursor: Cursor;
    history: History;
    toolManager: ToolManager;
    elementManager: ElementManager;
    selection: SelectionManager;
    assetsManager: AssetsManager;
    rect: BoundingRect;
    viewportRect: BoundingRect;
    initialized: boolean;
    constructor({ container, elements, assets, events, config, }: {
        container: HTMLDivElement;
        assets: VisionEditorAssetType[];
        elements: ElementProps[];
        events?: EventHandlers;
        config: EditorConfig;
    });
    execute(type: VisionEventType, data?: unknown): void;
    export(): EditorExportFileType;
    updateViewport(): void;
    destroy(): void;
}
export default Editor;
